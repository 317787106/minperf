package org.minperf;

/**
 * The settings used to generate the hash function.
 */
public class Settings {

public static final boolean IMPROVED_SPLIT_RULES = true;

    /**
     * The number of supplemental hash functions per universal hash is 2 ^ this
     * number. Could be increased to reduce the number of universal hash
     * function calls, which also speeds up evaluation time.
     */
    public static final int SUPPLEMENTAL_HASH_SHIFT = 18;

    /**
     * The number of times the same universal hash is mixed using the
     * supplemental hash function. Must be a power of 2.
     */
    private static final long SUPPLEMENTAL_HASH_CALLS = 1 << SUPPLEMENTAL_HASH_SHIFT;

    /**
     * The estimated space in bits for 1000 entries, where leafSize is the array
     * index.
     */
    private static final int[] ESTIMATED_SPACE = { 10000, 3571, 2574, 2322, 2124,
            1920, 1848, 1785, 1717, 1692, 1635, 1620, 1608, 1587, 1581, 1564,
            1554, 1552, 1543, 1534, 1528, 1524, 1522, 1517, 1517, 1495 };

    /**
     * The Rice parameter k to use for leaves of size = array index.
     */
    private static final int[] RICE_LEAF = { 0, 0, 0, 1, 3, 4, 5, 7, 8, 10, 11,
            12, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 32, 33, 35,
            36, 38, 39, 40, 42 };

    /**
     * The Rice parameter k that is used to split medium sized sets that are
     * evenly split into subsets.
     */
    private static final int[][] RICE_SPLIT_MORE = {
        // 0 .. 6
        { }, { }, { }, { }, { }, { 4}, { 4},
        // 7 .. 13
        { 4}, { 7}, { 7}, { 10, 7}, { 11, 7}, { 11, 7}, { 14, 8},
        // 14 .. 18
        { 14, 8}, { 15, 8}, { 18, 8}, { 18, 8}, { 19, 8},
        // 19 .. 23
        { 22, 13}, { 22, 13}, { 23, 14}, { 26, 14}, { 27, 14},
        // 24 .. 25
        { 27, 14}, { 31, 20, 12}};

    /**
     * Split rules used (size, number of subsets, rice code).
     */
    private static final int[][] SPLIT_RULES = {
    // leafSize 0
    {  },
    // leafSize 1
    {  },
    // leafSize 2
    {  },
    // leafSize 3
    {  },
    // leafSize 4
    {  },
    // leafSize 5
    { 18, 2, 2, 20, 2, 2 },
    // leafSize 6
    { 10, 2, 1, 12, 2, 1, 14, 2, 2, 15, 3, 4,
        24, 2, 2, 26, 2, 2, 30, 2, 2, 44, 2, 2 },
    // leafSize 7
    { 18, 3, 4, 21, 3, 4, 42, 2, 2, 52, 2, 3,
        54, 2, 3, 56, 2, 3, 58, 2, 3, 60, 2, 3,
        62, 2, 3, 64, 2, 3, 66, 2, 3, 68, 2, 3,
        70, 2, 3, 72, 2, 3, 74, 2, 3, 76, 2, 3,
        78, 2, 3, 84, 2, 3 },
    // leafSize 8
    { 14, 2, 2, 15, 3, 4, 16, 2, 2, 18, 3, 4,
        20, 4, 6, 21, 3, 4, 24, 3, 4, 42, 2, 2,
        48, 2, 2, 60, 2, 3, 62, 2, 3, 64, 2, 3,
        66, 2, 3, 68, 2, 3, 70, 2, 3, 72, 2, 3,
        74, 2, 3, 76, 2, 3, 78, 2, 3, 80, 2, 3,
        84, 2, 3, 96, 2, 3 },
    // leafSize 9
    { 14, 2, 2, 15, 3, 4, 16, 2, 2, 18, 2, 2,
        20, 2, 2, 21, 3, 4, 24, 3, 4, 27, 3, 4,
        28, 4, 7, 30, 3, 5, 32, 4, 7, 36, 4, 7,
        48, 2, 2, 54, 2, 3, 56, 2, 3, 63, 3, 6,
        64, 2, 3, 72, 2, 3, 86, 2, 3, 88, 2, 3,
        90, 2, 3, 92, 2, 3, 94, 2, 3, 96, 2, 3,
        108, 2, 3, 128, 2, 3, 144, 2, 3, 256, 2, 4,
        270, 2, 4, 272, 2, 4, 274, 2, 4, 276, 2, 4,
        278, 2, 4, 280, 2, 4, 282, 2, 4, 284, 2, 4,
        286, 2, 4, 288, 2, 4, 302, 2, 4, 304, 2, 4,
        306, 2, 4, 308, 2, 4, 310, 2, 4, 312, 2, 4,
        314, 2, 4, 316, 2, 4, 318, 2, 4, 320, 2, 4,
        322, 2, 4, 324, 2, 4, 326, 2, 4, 328, 2, 4,
        330, 2, 4, 332, 2, 4, 334, 2, 4, 336, 2, 4,
        338, 2, 4, 340, 2, 4, 342, 2, 4, 344, 2, 4,
        346, 2, 4, 348, 2, 4, 350, 2, 4, 352, 2, 4,
        354, 2, 4, 356, 2, 4, 358, 2, 4, 360, 2, 4,
        362, 2, 4, 364, 2, 4, 366, 2, 4, 368, 2, 4,
        370, 2, 4, 372, 2, 4, 374, 2, 4, 376, 2, 4,
        378, 2, 4, 380, 2, 4, 382, 2, 4, 384, 2, 4,
        386, 2, 4, 388, 2, 4 },
    // leafSize 10
    { 16, 2, 2, 18, 2, 2, 20, 2, 2, 21, 3, 4,
        22, 2, 2, 24, 3, 4, 27, 3, 4, 28, 4, 7,
        30, 3, 5, 32, 4, 7, 36, 4, 7, 40, 4, 7,
        90, 3, 6, 92, 2, 3, 93, 3, 6, 94, 2, 3,
        96, 2, 3, 98, 2, 3, 100, 2, 3, 102, 2, 3,
        104, 2, 3, 106, 2, 3, 108, 3, 6, 112, 2, 3,
        116, 2, 3, 120, 3, 7, 300, 2, 4, 302, 2, 4,
        304, 2, 4, 306, 2, 4, 308, 2, 4, 310, 2, 4,
        312, 2, 4, 314, 2, 4, 316, 2, 4, 318, 2, 4,
        320, 2, 4, 322, 2, 4, 324, 2, 4, 326, 2, 4,
        328, 2, 4, 330, 2, 4, 332, 2, 4, 334, 2, 4,
        336, 2, 4, 338, 2, 4, 340, 2, 4, 342, 2, 4,
        344, 2, 4, 346, 2, 4, 348, 2, 4, 350, 2, 4,
        352, 2, 4, 354, 2, 4, 356, 2, 4, 358, 2, 4,
        360, 2, 4, 362, 2, 4, 364, 2, 4, 366, 2, 4,
        368, 2, 4, 370, 2, 4, 372, 2, 4, 374, 2, 4,
        376, 2, 4, 378, 2, 4, 380, 2, 4, 382, 2, 4,
        384, 2, 4, 386, 2, 4, 388, 2, 4, 390, 2, 4,
        392, 2, 4, 394, 2, 4, 396, 2, 4, 398, 2, 4,
        400, 2, 4, 402, 2, 4, 404, 2, 4, 406, 2, 4,
        408, 2, 4, 410, 2, 4, 412, 2, 4, 414, 2, 4,
        416, 2, 4, 418, 2, 4, 420, 2, 4, 432, 2, 4,
        436, 2, 4, 440, 2, 4, 456, 2, 4, 480, 2, 4,
        494, 2, 4, 496, 2, 4, 498, 2, 4, 500, 2, 4,
        502, 2, 4, 504, 2, 4, 506, 2, 4, 508, 2, 4,
        510, 2, 4, 512, 2, 4, 514, 2, 4, 516, 2, 4,
        518, 2, 4, 520, 2, 4, 522, 2, 4, 524, 2, 4,
        526, 2, 4, 528, 2, 4, 530, 2, 4, 532, 2, 4,
        534, 2, 4, 536, 2, 4, 538, 2, 4, 540, 2, 4,
        542, 2, 4, 544, 2, 4, 546, 2, 4, 548, 2, 4,
        550, 2, 4, 552, 2, 4, 554, 2, 4, 556, 2, 4,
        558, 2, 4, 560, 2, 4, 562, 2, 4, 564, 2, 4,
        566, 2, 4, 568, 2, 4, 570, 2, 4, 572, 2, 4,
        574, 2, 4, 576, 2, 4, 578, 2, 4, 580, 2, 4,
        582, 2, 4, 584, 2, 4, 586, 2, 4, 588, 2, 4,
        590, 2, 4, 592, 2, 4, 594, 2, 4, 596, 2, 4,
        598, 2, 4, 600, 2, 4, 624, 2, 4, 640, 2, 4 },
    // leafSize 11
    { 16, 2, 2, 18, 2, 2, 20, 2, 2, 21, 3, 4,
        22, 2, 2, 24, 3, 4, 27, 3, 4, 28, 4, 7,
        30, 3, 5, 32, 4, 7, 33, 3, 5, 36, 4, 7,
        40, 4, 7, 44, 4, 8, 80, 2, 3, 88, 2, 3,
        90, 3, 6, 92, 2, 3, 94, 2, 3, 96, 2, 3,
        98, 2, 3, 99, 3, 6, 120, 3, 7, 132, 3, 7,
        324, 2, 4, 326, 2, 4, 328, 2, 4, 330, 2, 4,
        332, 2, 4, 334, 2, 4, 336, 2, 4, 338, 2, 4,
        340, 2, 4, 342, 2, 4, 344, 2, 4, 346, 2, 4,
        348, 2, 4, 350, 2, 4, 352, 2, 4, 354, 2, 4,
        356, 2, 4, 358, 2, 4, 360, 2, 4, 362, 2, 4,
        364, 2, 4, 366, 2, 4, 368, 2, 4, 370, 2, 4,
        372, 2, 4, 374, 2, 4, 376, 2, 4, 378, 2, 4,
        380, 2, 4, 382, 2, 4, 384, 2, 4, 386, 2, 4,
        388, 2, 4, 390, 2, 4, 392, 2, 4, 394, 2, 4,
        396, 2, 4, 398, 2, 4, 400, 2, 4, 402, 2, 4,
        404, 2, 4, 406, 2, 4, 408, 2, 4, 410, 2, 4,
        412, 2, 4, 414, 2, 4, 416, 2, 4, 418, 2, 4,
        420, 2, 4, 422, 2, 4, 424, 2, 4, 438, 2, 4,
        440, 2, 4, 462, 2, 4, 476, 2, 4, 478, 2, 4,
        480, 2, 4, 482, 2, 4, 484, 2, 4, 486, 2, 4,
        488, 2, 4, 490, 2, 4, 492, 2, 4, 494, 2, 4,
        496, 2, 4, 498, 2, 4, 500, 2, 4, 502, 2, 4,
        504, 2, 4, 518, 2, 4, 520, 2, 4, 522, 2, 4,
        524, 2, 4, 526, 2, 4, 528, 2, 4, 542, 2, 4,
        544, 2, 4, 546, 2, 4, 548, 2, 4, 550, 2, 4,
        552, 2, 4, 554, 2, 4, 556, 2, 4, 558, 2, 4,
        560, 2, 4, 562, 2, 4, 564, 2, 4, 566, 2, 4,
        568, 2, 4, 570, 2, 4, 572, 2, 4, 574, 2, 4,
        576, 2, 4, 578, 2, 4, 580, 2, 4, 582, 2, 4,
        584, 2, 4, 586, 2, 4, 588, 2, 4, 590, 2, 4,
        592, 2, 4, 594, 2, 4, 596, 2, 4, 598, 2, 4,
        600, 2, 4, 602, 2, 4, 604, 2, 4, 606, 2, 4,
        608, 2, 4, 610, 2, 4, 612, 2, 4, 614, 2, 4,
        616, 2, 4, 618, 2, 4, 620, 2, 4, 622, 2, 4,
        624, 2, 4, 626, 2, 4, 628, 2, 4, 630, 2, 4,
        632, 2, 4, 634, 2, 4, 636, 2, 4, 638, 2, 4,
        640, 2, 4, 642, 2, 4, 644, 2, 4, 646, 2, 4,
        648, 2, 4, 660, 2, 4, 688, 2, 4, 704, 2, 4 },
    // leafSize 12
    { 16, 2, 2, 18, 2, 2, 20, 2, 2, 21, 3, 4,
        22, 2, 2, 24, 2, 2, 26, 2, 2, 27, 3, 4,
        28, 4, 7, 30, 3, 5, 32, 4, 7, 33, 3, 5,
        36, 3, 5, 40, 4, 7, 44, 4, 8, 48, 4, 8,
        50, 5, 10, 55, 5, 11, 60, 5, 11, 88, 2, 3,
        90, 3, 6, 92, 2, 3, 94, 2, 3, 96, 2, 3,
        99, 3, 6, 100, 2, 3, 108, 3, 6, 110, 2, 3,
        120, 2, 3, 144, 3, 7, 165, 3, 7, 168, 2, 3,
        176, 2, 3, 180, 3, 7, 284, 2, 4, 286, 2, 4,
        288, 2, 4, 304, 2, 4, 306, 2, 4, 308, 2, 4,
        310, 2, 4, 312, 2, 4, 314, 2, 4, 316, 2, 4,
        318, 2, 4, 320, 2, 4, 322, 2, 4, 324, 3, 8,
        328, 2, 4, 330, 2, 4, 360, 2, 4, 682, 2, 4,
        684, 2, 4, 686, 2, 4, 688, 2, 4, 690, 2, 4,
        692, 2, 4, 694, 2, 4, 696, 2, 4, 698, 2, 4,
        700, 2, 4, 702, 2, 4, 704, 2, 4, 706, 2, 4,
        708, 2, 4, 710, 2, 4, 712, 2, 4, 714, 2, 4,
        716, 2, 4, 718, 2, 4, 720, 2, 4, 808, 2, 5,
        810, 2, 5, 812, 2, 5, 814, 2, 5, 816, 2, 5,
        818, 2, 5, 820, 2, 5, 830, 2, 5, 840, 2, 5,
        854, 2, 5, 856, 2, 5, 858, 2, 5, 860, 2, 5,
        862, 2, 5, 864, 2, 5, 866, 2, 5, 868, 2, 5,
        870, 2, 5, 872, 2, 5, 874, 2, 5, 876, 2, 5,
        878, 2, 5, 880, 2, 5, 882, 2, 5, 884, 2, 5,
        886, 2, 5, 888, 2, 5, 890, 2, 5, 892, 2, 5,
        894, 2, 5, 896, 2, 5, 912, 2, 5, 936, 2, 5,
        940, 2, 5, 954, 2, 5, 956, 2, 5, 958, 2, 5,
        960, 2, 5, 974, 2, 5, 976, 2, 5, 978, 2, 5,
        980, 2, 5, 982, 2, 5, 984, 2, 5, 986, 2, 5,
        988, 2, 5, 990, 2, 5, 992, 2, 5, 994, 2, 5,
        996, 2, 5, 998, 2, 5, 1000, 2, 5, 1002, 2, 5,
        1004, 2, 5, 1006, 2, 5, 1008, 2, 5, 1022, 2, 5 },
    // leafSize 13
    { 20, 2, 2, 21, 3, 4, 22, 2, 2, 24, 2, 2,
        26, 2, 2, 30, 3, 5, 32, 4, 7, 33, 3, 5,
        36, 3, 5, 39, 3, 5, 40, 4, 7, 44, 4, 8,
        48, 4, 8, 50, 5, 10, 52, 4, 8, 55, 5, 11,
        60, 5, 11, 65, 5, 11, 96, 2, 3, 99, 3, 6,
        100, 2, 3, 104, 2, 3, 120, 2, 3, 130, 2, 3,
        156, 3, 7, 180, 3, 7, 182, 2, 3, 190, 2, 4,
        192, 4, 11, 195, 3, 7, 208, 4, 11, 231, 3, 8,
        232, 2, 4, 234, 3, 8, 240, 2, 4, 255, 3, 8,
        256, 2, 4, 258, 2, 4, 260, 2, 4, 276, 2, 4,
        278, 2, 4, 280, 2, 4, 282, 2, 4, 284, 2, 4,
        286, 2, 4, 288, 2, 4, 290, 2, 4, 292, 2, 4,
        294, 2, 4, 296, 2, 4, 298, 2, 4, 300, 2, 4,
        302, 2, 4, 304, 2, 4, 306, 2, 4, 308, 2, 4,
        310, 2, 4, 312, 2, 4, 328, 2, 4, 330, 2, 4,
        332, 2, 4, 334, 2, 4, 336, 2, 4, 338, 2, 4,
        340, 2, 4, 342, 3, 8, 344, 2, 4, 345, 3, 8,
        346, 2, 4, 348, 3, 8, 350, 2, 4, 351, 3, 8,
        352, 2, 4, 354, 2, 4, 356, 2, 4, 358, 2, 4,
        360, 2, 4, 364, 2, 4, 384, 2, 4, 390, 2, 4,
        416, 2, 4, 520, 2, 4, 585, 3, 9, 818, 2, 5,
        820, 2, 5, 822, 2, 5, 824, 2, 5, 826, 2, 5,
        828, 2, 5, 830, 2, 5, 832, 2, 5, 920, 2, 5,
        922, 2, 5, 924, 2, 5, 926, 2, 5, 928, 2, 5,
        930, 2, 5, 932, 2, 5, 936, 2, 5, 942, 2, 5,
        952, 2, 5, 962, 2, 5, 978, 2, 5, 980, 2, 5,
        982, 2, 5, 984, 2, 5, 986, 2, 5, 988, 2, 5,
        990, 2, 5, 992, 2, 5, 994, 2, 5, 996, 2, 5,
        998, 2, 5, 1000, 2, 5, 1002, 2, 5, 1004, 2, 5,
        1006, 2, 5, 1008, 2, 5, 1010, 2, 5, 1012, 2, 5,
        1014, 2, 5, 1016, 2, 5, 1018, 2, 5, 1020, 2, 5,
        1022, 2, 5 },
    // leafSize 14
    { 20, 2, 2, 21, 3, 4, 22, 2, 2, 24, 2, 2,
        26, 2, 2, 28, 2, 2, 30, 3, 5, 32, 4, 7,
        33, 3, 5, 36, 3, 5, 39, 3, 5, 40, 4, 7,
        42, 3, 5, 44, 4, 8, 48, 4, 8, 50, 5, 10,
        52, 4, 8, 55, 5, 11, 56, 4, 8, 60, 5, 11,
        65, 5, 11, 66, 6, 13, 70, 5, 11, 72, 6, 14,
        78, 2, 3, 80, 2, 3, 84, 2, 3, 88, 2, 3,
        90, 3, 6, 92, 2, 3, 94, 2, 3, 95, 5, 12,
        96, 2, 3, 99, 3, 6, 100, 2, 3, 104, 2, 3,
        112, 2, 3, 117, 3, 7, 120, 2, 3, 126, 3, 7,
        130, 2, 3, 140, 2, 3, 144, 2, 3, 156, 3, 7,
        168, 3, 7, 195, 3, 7, 208, 4, 11, 210, 3, 7,
        224, 4, 11, 260, 4, 11, 280, 4, 12, 362, 2, 4,
        364, 2, 4, 366, 2, 4, 368, 2, 4, 370, 2, 4,
        372, 2, 4, 374, 2, 4, 376, 2, 4, 378, 3, 8,
        380, 2, 4, 382, 2, 4, 384, 2, 4, 386, 2, 4,
        388, 2, 4, 390, 2, 4, 416, 2, 4, 420, 2, 4,
        448, 2, 4, 520, 2, 4, 560, 2, 4, 585, 3, 9,
        586, 2, 4, 588, 2, 4, 590, 2, 4, 592, 2, 4,
        594, 2, 4, 596, 2, 4, 598, 2, 4, 600, 2, 4,
        602, 2, 4, 604, 2, 4, 606, 2, 4, 608, 2, 4,
        610, 2, 4, 612, 2, 4, 614, 2, 4, 615, 3, 9,
        616, 2, 4, 618, 2, 4, 620, 2, 4, 621, 3, 9,
        622, 2, 4, 624, 3, 9, 626, 2, 4, 628, 2, 4,
        630, 3, 9, 664, 2, 4, 666, 3, 9, 668, 2, 4,
        669, 3, 9, 670, 2, 4, 672, 2, 4, 680, 2, 4,
        690, 2, 4, 692, 2, 4, 700, 2, 4, 704, 2, 4,
        780, 3, 9, 840, 3, 9 },
    // leafSize 15
    { 20, 2, 2, 21, 3, 4, 22, 2, 2, 24, 2, 2,
        26, 2, 2, 28, 2, 2, 30, 2, 2, 33, 3, 5,
        36, 3, 5, 39, 3, 5, 40, 4, 7, 42, 3, 5,
        44, 4, 8, 45, 3, 5, 48, 4, 8, 50, 5, 10,
        52, 4, 8, 55, 5, 11, 56, 4, 8, 60, 4, 8,
        65, 5, 11, 66, 6, 13, 70, 5, 11, 72, 6, 14,
        75, 5, 11, 78, 6, 14, 84, 6, 14, 90, 6, 15,
        130, 2, 3, 135, 3, 7, 140, 2, 3, 144, 2, 3,
        150, 2, 3, 156, 2, 3, 168, 2, 3, 180, 2, 3,
        200, 2, 4, 202, 2, 4, 204, 2, 4, 206, 2, 4,
        208, 2, 4, 210, 2, 4, 212, 2, 4, 214, 2, 4,
        216, 3, 7, 218, 2, 4, 220, 2, 4, 222, 2, 4,
        224, 4, 11, 225, 3, 8, 240, 4, 11, 252, 3, 8,
        258, 2, 4, 260, 4, 11, 270, 3, 8, 300, 4, 12,
        336, 4, 12, 354, 3, 8, 356, 2, 4, 357, 3, 8,
        358, 2, 4, 360, 4, 12, 573, 3, 9, 574, 2, 4,
        576, 3, 9, 578, 2, 4, 579, 3, 9, 580, 2, 4,
        582, 3, 9, 584, 2, 4, 585, 3, 9, 588, 2, 4,
        590, 2, 4, 592, 2, 4, 594, 2, 4, 596, 2, 4,
        598, 2, 4, 600, 2, 4, 720, 2, 4, 810, 3, 9,
        832, 2, 5, 834, 3, 9, 836, 2, 5, 837, 3, 9,
        838, 2, 5, 840, 2, 5, 843, 3, 9, 844, 2, 5,
        846, 3, 9, 848, 2, 5, 849, 3, 9, 850, 2, 5,
        852, 3, 9, 855, 3, 9, 860, 2, 5, 864, 2, 5,
        870, 2, 5, 876, 2, 5, 888, 2, 5, 900, 2, 5,
        918, 2, 5, 920, 2, 5, 922, 2, 5, 924, 2, 5,
        926, 2, 5, 928, 2, 5, 930, 2, 5, 932, 2, 5,
        933, 3, 10, 934, 2, 5, 936, 2, 5, 938, 2, 5,
        939, 3, 10, 940, 2, 5, 942, 3, 10, 944, 2, 5,
        945, 3, 10, 946, 2, 5, 948, 2, 5, 950, 2, 5,
        951, 3, 10, 952, 2, 5, 954, 2, 5, 956, 2, 5,
        958, 2, 5, 960, 2, 5, 962, 2, 5, 964, 2, 5,
        966, 2, 5, 968, 2, 5, 970, 2, 5, 972, 2, 5,
        974, 2, 5, 976, 2, 5, 978, 2, 5, 980, 2, 5,
        984, 3, 10, 986, 2, 5, 987, 3, 10, 988, 2, 5,
        990, 2, 5, 1000, 2, 5, 1008, 3, 10, 1020, 2, 5 },
    // leafSize 16
    { 22, 2, 2, 24, 2, 2, 26, 2, 2, 28, 2, 2,
        30, 2, 2, 32, 2, 2, 33, 3, 5, 36, 3, 5,
        39, 3, 5, 40, 4, 7, 42, 3, 5, 44, 4, 8,
        45, 3, 5, 48, 3, 5, 50, 5, 10, 51, 3, 5,
        52, 4, 8, 55, 5, 11, 56, 4, 8, 60, 4, 8,
        64, 4, 8, 65, 5, 11, 66, 6, 13, 70, 5, 11,
        72, 6, 14, 75, 5, 11, 77, 7, 16, 78, 6, 14,
        80, 5, 12, 84, 6, 14, 90, 6, 15, 96, 6, 15,
        130, 2, 3, 135, 3, 7, 140, 2, 3, 144, 3, 7,
        150, 2, 3, 156, 2, 3, 160, 2, 3, 180, 2, 3,
        192, 2, 4, 212, 2, 4, 214, 2, 4, 216, 2, 4,
        218, 2, 4, 220, 2, 4, 222, 2, 4, 224, 2, 4,
        225, 3, 8, 226, 2, 4, 228, 2, 4, 230, 2, 4,
        232, 2, 4, 234, 3, 8, 236, 2, 4, 238, 2, 4,
        240, 3, 8, 256, 4, 11, 270, 3, 8, 288, 3, 8,
        320, 4, 12, 360, 4, 12, 384, 4, 12, 576, 2, 4,
        718, 2, 4, 720, 3, 9, 768, 2, 5, 864, 3, 9,
        888, 2, 5, 894, 3, 10, 896, 2, 5, 898, 2, 5,
        900, 3, 10, 903, 3, 10, 906, 3, 10, 908, 2, 5,
        909, 3, 10, 910, 2, 5, 912, 3, 10, 918, 2, 5,
        924, 2, 5, 928, 2, 5, 936, 2, 5, 948, 2, 5,
        960, 2, 5, 978, 2, 5, 980, 2, 5, 982, 2, 5,
        984, 2, 5, 986, 2, 5, 988, 2, 5, 990, 2, 5,
        992, 2, 5, 994, 2, 5, 996, 2, 5, 998, 2, 5,
        999, 3, 10, 1000, 2, 5, 1002, 2, 5, 1004, 2, 5,
        1005, 3, 10, 1006, 2, 5, 1008, 2, 5, 1010, 2, 5,
        1011, 3, 10, 1012, 2, 5, 1014, 2, 5, 1016, 2, 5,
        1018, 2, 5, 1020, 2, 5, 1022, 2, 5 },
    // leafSize 17
    { 20, 2, 2, 21, 3, 4, 22, 2, 2, 24, 2, 2,
        26, 2, 2, 28, 2, 2, 30, 2, 2, 32, 2, 2,
        33, 3, 5, 34, 2, 2, 36, 3, 5, 39, 3, 5,
        40, 4, 7, 42, 3, 5, 44, 4, 8, 45, 3, 5,
        48, 3, 5, 50, 5, 10, 51, 3, 5, 52, 4, 8,
        55, 5, 11, 56, 4, 8, 60, 4, 8, 64, 4, 8,
        65, 5, 11, 66, 6, 13, 68, 4, 9, 70, 5, 11,
        72, 6, 14, 75, 5, 11, 77, 7, 16, 78, 6, 14,
        80, 5, 12, 84, 6, 14, 85, 5, 12, 90, 6, 15,
        91, 7, 17, 96, 6, 15, 98, 7, 17, 102, 6, 15,
        105, 7, 18, 128, 2, 3, 130, 2, 3, 135, 3, 7,
        136, 2, 3, 140, 2, 3, 144, 3, 7, 150, 2, 3,
        153, 3, 7, 156, 2, 3, 160, 2, 3, 170, 2, 3,
        180, 2, 3, 182, 2, 3, 192, 2, 4, 196, 2, 4,
        204, 2, 4, 210, 2, 4, 225, 3, 8, 226, 2, 4,
        228, 2, 4, 230, 2, 4, 232, 2, 4, 234, 2, 4,
        236, 2, 4, 238, 2, 4, 240, 3, 8, 242, 2, 4,
        244, 2, 4, 246, 2, 4, 248, 2, 4, 249, 3, 8,
        250, 2, 4, 252, 3, 8, 254, 2, 4, 255, 3, 8,
        256, 4, 11, 270, 3, 8, 272, 4, 12, 288, 3, 8,
        306, 3, 8, 315, 3, 8, 320, 4, 12, 340, 4, 12,
        360, 4, 12, 363, 3, 8, 364, 4, 12, 366, 3, 8,
        375, 5, 16, 384, 4, 12, 408, 4, 12, 540, 2, 4,
        544, 2, 4, 576, 2, 4, 612, 2, 4, 706, 2, 4,
        708, 2, 4, 710, 2, 4, 712, 2, 4, 714, 2, 4,
        716, 2, 4, 718, 2, 4, 720, 3, 9, 765, 3, 9,
        768, 2, 5, 816, 2, 5, 918, 3, 10, 936, 2, 5,
        944, 2, 5, 946, 2, 5, 948, 2, 5, 952, 2, 5,
        956, 2, 5, 960, 3, 10, 966, 2, 5, 972, 2, 5,
        976, 2, 5, 984, 2, 5, 986, 2, 5, 996, 2, 5,
        998, 2, 5, 1008, 2, 5, 1012, 2, 5, 1020, 2, 5 },
    // leafSize 18
    { 30, 2, 2, 32, 2, 2, 33, 3, 5, 34, 2, 2,
        36, 2, 2, 39, 3, 5, 40, 4, 7, 42, 3, 5,
        44, 4, 8, 45, 3, 5, 48, 3, 5, 50, 5, 10,
        51, 3, 5, 52, 4, 8, 54, 3, 5, 56, 4, 8,
        58, 2, 3, 60, 4, 8, 64, 4, 8, 65, 5, 11,
        66, 6, 13, 68, 4, 9, 70, 5, 11, 72, 4, 9,
        75, 5, 11, 77, 7, 16, 78, 6, 14, 80, 5, 12,
        84, 6, 14, 85, 5, 12, 90, 5, 12, 96, 6, 15,
        98, 7, 17, 102, 6, 15, 105, 7, 18, 108, 6, 15,
        112, 7, 18, 119, 7, 18, 126, 7, 19, 170, 2, 3,
        180, 2, 3, 192, 2, 4, 196, 2, 4, 204, 2, 4,
        210, 2, 4, 216, 2, 4, 224, 2, 4, 225, 3, 8,
        226, 2, 4, 228, 2, 4, 230, 2, 4, 232, 2, 4,
        234, 2, 4, 236, 2, 4, 238, 2, 4, 240, 3, 8,
        242, 2, 4, 244, 2, 4, 246, 2, 4, 248, 2, 4,
        250, 2, 4, 252, 2, 4, 255, 3, 8, 256, 4, 11,
        258, 2, 4, 260, 2, 4, 262, 2, 4, 264, 2, 4,
        266, 2, 4, 268, 2, 4, 270, 3, 8, 272, 2, 4,
        274, 2, 4, 276, 2, 4, 278, 2, 4, 280, 2, 4,
        282, 2, 4, 284, 2, 4, 286, 2, 4, 288, 2, 4,
        290, 2, 4, 292, 2, 4, 294, 2, 4, 296, 2, 4,
        298, 2, 4, 300, 2, 4, 302, 2, 4, 304, 2, 4,
        306, 3, 8, 308, 2, 4, 310, 2, 4, 312, 2, 4,
        314, 2, 4, 315, 3, 8, 316, 2, 4, 318, 2, 4,
        320, 2, 4, 322, 2, 4, 324, 3, 8, 357, 3, 8,
        360, 4, 12, 378, 3, 8, 432, 4, 13, 450, 5, 17,
        476, 4, 13, 480, 5, 17, 486, 3, 9, 504, 4, 13,
        678, 2, 4, 680, 2, 4, 682, 2, 4, 684, 2, 4,
        686, 2, 4, 688, 2, 4, 690, 2, 4, 692, 2, 4,
        694, 2, 4, 696, 2, 4, 698, 2, 4, 700, 2, 4,
        702, 2, 4, 704, 2, 4, 706, 2, 4, 708, 2, 4,
        710, 2, 4, 712, 2, 4, 714, 2, 4, 720, 2, 4,
        756, 2, 5, 814, 2, 5, 816, 2, 5, 818, 2, 5,
        820, 2, 5, 822, 2, 5, 824, 2, 5, 826, 2, 5,
        828, 2, 5, 830, 2, 5, 832, 2, 5, 834, 2, 5,
        836, 2, 5, 838, 2, 5, 840, 2, 5, 842, 2, 5,
        844, 2, 5, 846, 2, 5, 848, 2, 5, 850, 2, 5,
        852, 2, 5, 854, 2, 5, 856, 2, 5, 858, 2, 5,
        860, 2, 5, 864, 2, 5, 900, 2, 5, 972, 3, 10,
        1008, 2, 5 }
    };

    /**
     * When splitting a set evenly into two subsets, the minimum size of the
     * set where k = array index should be used for the Rice parameter k.
     */
    private static final int[] RICE_SPLIT_2 = { 0, 4, 14, 50, 188, 726, 2858,
            11346, 45214, 180512 };

//    private static final int CACHE_SPLITS = 4 * 1024;
    private static final int CACHE_SPLITS = 10 * 1024;

    private final int leafSize;
    private final int averageBucketSize;

    private final int[] splits = new int[CACHE_SPLITS];
    private final int[] rice = new int[CACHE_SPLITS];

    /**
     * Constructor for settings.
     *
     * @param leafSize
     * @param averageBucketSize the load factor, at most 65536
     */
    public Settings(int leafSize, int averageBucketSize) {
        if (IMPROVED_SPLIT_RULES) {
            if (leafSize < 1 || leafSize > 32) {
                throw new IllegalArgumentException("leafSize out of range: " + leafSize);
            }
        } else {
        if (leafSize < 1 || leafSize > 25) {
            throw new IllegalArgumentException("leafSize out of range: " + leafSize);
        }
        }
        if (averageBucketSize < 2 || averageBucketSize > 65536) {
            throw new IllegalArgumentException("averageBucketSize out of range: " + averageBucketSize);
        }
        this.leafSize = leafSize;
        this.averageBucketSize = averageBucketSize;
        if (IMPROVED_SPLIT_RULES) {
            int[] splitRules = SPLIT_RULES[leafSize];
            for (int i = 0; i < splitRules.length; i += 3) {
                int size = splitRules[i];
                splits[size] = splitRules[i + 1];
                rice[size] = splitRules[i + 2];
            }
            for (int i = 0; i <= leafSize; i++) {
                splits[i] = i;
                rice[i] = RICE_LEAF[i];
            }
            int last = leafSize;
            for (int i = leafSize; i < CACHE_SPLITS; i++) {
                if (splits[i] != 0) {
                    last = i;
                } else {
                    splits[i] = -last;
                    rice[i] = calcRiceParamSplitByTwo(i);
                }
            }
        } else {
            for (int i = 0; i < CACHE_SPLITS; i++) {
                splits[i] = calcSplit(i, leafSize);
                rice[i] = calcGolombRiceShift(i, leafSize);
            }
        }
    }

    public int getMaxBucketSize() {
        // return averageBucketSize * 20;
        return 200 + averageBucketSize * 15 / 10;
    }

    public static int calcRiceParamSplitByTwo(int size) {
        // this will throw an exception for sizes >= 180172
        for (int i = 0;; i++) {
            if (RICE_SPLIT_2[i] > size) {
                return i - 1;
            }
        }
    }

    static int calcNextSplit(int factor) {
        return Math.max(2,  (int) (1.5 + factor * .35));
    }

    private static int calcSplit(int size, int leafSize) {
        for (int x = leafSize, f = x;;) {
            if (size < x) {
                return -(x / f);
            } else if (size == x) {
                return f;
            }
            f = calcNextSplit(f);
            x *= f;
        }
    }

    public long getEstimatedBits(long size) {
        return ESTIMATED_SPACE[leafSize] * size / 1000;
    }

    public int getSplit(int size) {
        if (size < CACHE_SPLITS) {
            return splits[size];
        }
        if (IMPROVED_SPLIT_RULES) {
            throw new IllegalArgumentException();
        }
        return calcSplit(size, leafSize);
    }

    private static int calcGolombRiceShift(int size, int leafSize) {
        if (size <= leafSize) {
            return RICE_LEAF[size];
        }
        int index = 0;
        for (int x = leafSize, f = x;;) {
            f = Settings.calcNextSplit(f);
            if (f <= 2) {
                break;
            }
            x *= f;
            if (size < x) {
                break;
            } else if (size == x) {
                return RICE_SPLIT_MORE[leafSize][index];
            }
            index++;
        }
        return calcRiceParamSplitByTwo(size);
    }

    public int getGolombRiceShift(int size) {
        if (size < CACHE_SPLITS) {
            return rice[size];
        }
        return calcGolombRiceShift(size, leafSize);
    }

    public static boolean needNewUniversalHashIndex(long index) {
        return (index & (SUPPLEMENTAL_HASH_CALLS - 1)) == 0;
    }

    public static long getUniversalHashIndex(long index) {
        return index >>> SUPPLEMENTAL_HASH_SHIFT;
    }

    public int getLeafSize() {
        return leafSize;
    }

    public int getAverageBucketSize() {
        return averageBucketSize;
    }

    public static int supplementalHash(long hash, long index) {
        // it would be better to use long,
        // but with some processors, 32-bit multiplication
        // seem to be much faster
        // (about 1200 ms for 32 bit, about 2000 ms for 64 bit)
        int x = (int) (Long.rotateLeft(hash, (int) index) ^ index);
        x = ((x >>> 16) ^ x) * 0x45d9f3b;
        x = ((x >>> 16) ^ x) * 0x45d9f3b;
        x = (x >>> 16) ^ x;
        return x;
    }

    public static long supplementalHashLong(long hash, long index) {
        long x = hash ^ index;
        // from http://zimbry.blogspot.it/2011/09/better-bit-mixing-improving-on.html
        // also used in it.unimi.dsi.fastutil
        x = (x ^ (x >>> 30)) * 0xbf58476d1ce4e5b9L;
        x = (x ^ (x >>> 27)) * 0x94d049bb133111ebL;
        x = x ^ (x >>> 31);
        return x;
    }

    public static int getBucketCount(long size, int averageBucketSize) {
        return (int) ((size + averageBucketSize - 1) / averageBucketSize);
    }

    public static int reduce(int hash, int n) {
        // http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/
        return (int) (((hash & 0xffffffffL) * n) >>> 32);
    }

}