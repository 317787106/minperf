package org.minperf;

import static org.junit.Assert.assertTrue;

import java.lang.ref.WeakReference;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.Assert;
import org.minperf.universal.LongHash;
import org.minperf.universal.UniversalHash;

/**
 * Methods to test the MPHF with random data.
 */
public class RandomizedTest {

    private static final char[] HEX = "0123456789abcdef".toCharArray();
    private static final int[] HEX_DECODE = new int['f' + 1];

    static {
        for (int i = 0; i < HEX_DECODE.length; i++) {
            HEX_DECODE[i] = -1;
        }
        for (int i = 0; i <= 9; i++) {
            HEX_DECODE[i + '0'] = i;
        }
        for (int i = 0; i <= 5; i++) {
            HEX_DECODE[i + 'a'] = HEX_DECODE[i + 'A'] = i + 10;
        }
    }

    public static void printLargeSet() {
        for (int i = 10; i <= 100_000_000; i *= 10) {
            FunctionInfo info = RandomizedTest.test(8, 128, i, false);
            System.out.println(info);
        }
    }

    public static void printTimeVersusSpace() {
        System.out.println("A Time Versus Space");
        final double evaluateWeight = 20;
        int size = 100000;
        System.out.println("size: " + size);
        ArrayList<FunctionInfo> list = new ArrayList<FunctionInfo>();
        outer:
        for (int leafSize = 2; leafSize <= 12; leafSize++) {
            int minAverageBucketSize = 4;
            for (int averageBucketSize = minAverageBucketSize; averageBucketSize <= 1024;) {
                System.out.println("leafSize " + leafSize + " " + averageBucketSize);
                FunctionInfo info = test(leafSize, averageBucketSize, size, true);
                if (info.evaluateNanos >= 10000) {
                    if (averageBucketSize == minAverageBucketSize) {
                        // done
                        break outer;
                    }
                    // next leaf size
                    break;
                }
                if (info.bitsPerKey < 4.0) {
                    list.add(info);
                }
                if (averageBucketSize < 16) {
                    averageBucketSize += 2;
                } else if (averageBucketSize < 32) {
                    averageBucketSize += 4;
                } else {
                    averageBucketSize *= 2;
                }
            }
        }
        Collections.sort(list, new Comparator<FunctionInfo>() {

            @Override
            public int compare(FunctionInfo o1, FunctionInfo o2) {
                double time1 = o1.evaluateNanos * evaluateWeight + o1.generateNanos;
                double time2 = o2.evaluateNanos * evaluateWeight + o2.generateNanos;
                int comp = Double.compare(time1, time2);
                if (comp == 0) {
                    comp = Double.compare(o1.bitsPerKey, o2.bitsPerKey);
                }
                return comp;
            }

        });
        FunctionInfo last = null;
        int minAverageBucketSize = Integer.MAX_VALUE, maxAverageBucketSize = 0;
        int minLeafSize = Integer.MAX_VALUE, maxLeafSize = 0;
        for (FunctionInfo info : list) {
            if (last != null && info.bitsPerKey > last.bitsPerKey) {
                continue;
            }
            System.out.println("        (" + info.bitsPerKey + ", " + info.evaluateNanos + ")");
            minAverageBucketSize = Math.min(minAverageBucketSize, info.averageBucketSize);
            maxAverageBucketSize = Math.max(maxAverageBucketSize, info.averageBucketSize);
            minLeafSize = Math.min(minLeafSize, info.leafSize);
            maxLeafSize = Math.max(maxLeafSize, info.leafSize);
            last = info;
        }
        System.out.println("for averageBucketSize between " + minAverageBucketSize + " and " + maxAverageBucketSize);
        System.out.println("and leafSize between " + minLeafSize + " and " + maxLeafSize);
        last = null;
        System.out.println("bits/key leafSize averageBucketSize evalTime genTime tableBitsPerKey");
        for (FunctionInfo info : list) {
            if (last != null && info.bitsPerKey > last.bitsPerKey) {
                continue;
            }
            System.out.println(info.bitsPerKey + " " + info.leafSize + " " + info.averageBucketSize +
                    " " + info.evaluateNanos + " " + info.generateNanos);
            last = info;
        }
    }

    public static void printEvaluationTimeVersusSpaceMedium() {
        System.out.println("A Evaluation Time Versus Space");
        int size = 100000;
        System.out.println("size: " + size);
        ArrayList<FunctionInfo> list = new ArrayList<FunctionInfo>();
        for (int i = 2; i < 22; i++) {
            int leafSize = (int) Math.round(0.18 * i + 6.83);
            int averageBucketSize = (int) Math.round(Math.pow(2, 0.3 * i + 2.79));
            // FunctionInfo info =
            test(leafSize, averageBucketSize, size / 10, true);
            // System.out.println("leafSize " + leafSize + " " + averageBucketSize + " " +
            //        info.evaluateNanos + " " + info.generateNanos + " " + info.bitsPerKey);
        }
        for (int leafSize = 8; leafSize < 14; leafSize++) {
            System.out.println("leafSize " + leafSize);
            // int leafSize = (int) Math.round(0.18 * i + 6.83);
            for (int averageBucketSize : new int[] { 4, 6, 8, 10, 12, 14, 16, 20, 24,
                    28, 32, 40, 48, 56, 64 }) {
                // int averageBucketSize = (int) Math.round(Math.pow(2, 0.3 * i + 2.79));
                test(leafSize, averageBucketSize, size, true);
                FunctionInfo info = test(leafSize, averageBucketSize, size, true);
                if (info.bitsPerKey < 2.4 && info.evaluateNanos < 250) {
                    System.out.println("leafSize " + leafSize + " averageBucketSize " + averageBucketSize +
                            " " + info.evaluateNanos + " " + info.generateNanos +
                            " " + info.bitsPerKey);
                    list.add(info);
                    break;
                }
            }
        }
        System.out.println("A Evaluation Time Versus Space");
        for (FunctionInfo info : list) {
            System.out.println("        (" + info.bitsPerKey + ", " + info.evaluateNanos + ")");
        }
        System.out.println("B Generation Time Versus Space");
        for (FunctionInfo info : list) {
            System.out.println("        (" + info.bitsPerKey + ", " + info.generateNanos + ")");
        }
    }

    public static void printEvaluationAndGenerationTimeVersusSpace() {
        System.out.println("A Evaluation Time Versus Space");
        int size = 200000;
        System.out.println("size: " + size);
        ArrayList<FunctionInfo> list = new ArrayList<FunctionInfo>();
        double[] data = {

//              // WikipediaTest, IMPROVED_SPLIT_RULES 2, singlethreaded
                5, 20, 2.359670168001244, 1079, 334,
                6, 12, 2.4303717869483954, 951, 342,
                6, 14, 2.357967341920603, 1155, 322,
                6, 16, 2.3323145349758843, 998, 321,
                6, 20, 2.2812246357299055, 1025, 334,
                7, 16, 2.2096194929015978, 1242, 345,
                7, 20, 2.1742915744950557, 1293, 314,
                7, 24, 2.1007140296084508, 1355, 309,
                8, 10, 2.377269897563485, 1694, 308,
                8, 18, 2.131266063511737, 1593, 300,
                8, 20, 2.11845541447963, 1650, 308,
                8, 24, 2.0638098592566307, 1872, 305,
                8, 64, 1.921307580838036, 2155, 363,
                8, 96, 1.8674475931743013, 1985, 398,
                8, 128, 1.8262873001942272, 2289, 428,
                9, 12, 2.2458253510555526, 2827, 295,
                9, 14, 2.21441342095181, 2695, 299,
                9, 16, 2.1511489750305923, 2648, 299,
                9, 18, 2.1036982168296405, 2627, 304,
                9, 20, 2.0933374505834883, 2575, 302,
                9, 24, 2.046982770533447, 2760, 311,
                9, 28, 1.9954129667997726, 3132, 321,
                9, 32, 1.9533855063391257, 3608, 305,
                9, 64, 1.878018957237164, 3058, 337,
                10, 32, 1.9282185286288644, 5108, 298,
                10, 64, 1.8208755826407748, 8252, 332,
                10, 192, 1.7124357505817613, 10393, 437,
                11, 32, 1.909093715388833, 9766, 298,
                11, 64, 1.7988263682605121, 17889, 313,
                11, 256, 1.6815680892600802, 20773, 422,
                12, 64, 1.7663794926201724, 48849, 298,
                13, 128, 1.6847065892037447, 104284, 334,
                13, 192, 1.657460294686805, 125301, 395,
                14, 192, 1.647726743677378, 250957, 386,
                14, 256, 1.6321486992942247, 264697, 445,
                14, 512, 1.6139085584683803, 262655, 546,

//                // WikipediaTest, IMPROVED_SPLIT_RULES = true, multithreaded gen
//                5, 20, 2.361259077360058, 754, 352,
//                6, 12, 2.415688110019585, 514, 331,
//                6, 14, 2.3353765518249885, 535, 323,
//                6, 16, 2.3029213276778484, 501, 321,
//                6, 20, 2.231098315752713, 481, 321,
//                7, 16, 2.2096194929015978, 527, 315,
//                7, 20, 2.174290497268372, 527, 316,
//                7, 24, 2.1007199543552124, 534, 321,
//                8, 10, 2.3725640327946853, 772, 312,
//                8, 18, 2.130093771572937, 612, 310,
//                8, 20, 2.1442086728126264, 622, 316,
//                8, 24, 2.063070343138105, 664, 310,
//                8, 64, 1.873041900650682, 768, 332,
//                8, 96, 1.822206496208785, 772, 357,
//                8, 128, 1.7964158042485214, 783, 379,
//                9, 12, 2.236310207756295, 903, 308,
//                9, 14, 2.1689636113162796, 900, 306,
//                9, 16, 2.142868602817803, 887, 307,
//                9, 18, 2.0976237355588925, 847, 309,
//                9, 20, 2.0890584368882004, 929, 316,
//                9, 24, 2.043965727898397, 777, 324,
//                9, 28, 1.9915222933240457, 821, 309,
//                9, 32, 1.9494118864087353, 912, 305,
//                9, 64, 1.8568808073248453, 1067, 329,
//                10, 32, 1.9271515355984201, 1319, 316,
//                10, 64, 1.821963042978214, 1889, 323,
//                10, 192, 1.7192844885315923, 2135, 392,
//                11, 32, 1.9121759302382613, 2252, 303,
//                11, 64, 1.7827549540561136, 5444, 311,
//                11, 256, 1.6774269605803371, 5891, 411,
//                12, 64, 1.7675248538918735, 9955, 327,
//                13, 128, 1.6836334021198676, 24108, 332,
//                13, 192, 1.6562855789879665, 24268, 365,
//                14, 192, 1.6426212278088357, 78389, 364,
//                14, 256, 1.6305463246018612, 80050, 425,
//                14, 512, 1.609989338485529, 82630, 482,
//                15, 256, 1.6175950974875, 155998, 403,
//                15, 512, 1.5984638208873647, 169226, 493,
//                15, 1024, 1.5884895097140768, 176353, 672,
//                16, 1024, 1.5794946669031629, 408296, 664,

                // WikipediaTest, IMPROVED_SPLIT_RULES disabled
//                5, 20, 2.2934250358455595, 1257, 334,
//                6, 20, 2.2301333899505726, 1177, 338,
//                7, 16, 2.2056644551315054, 1459, 316,
//                7, 20, 2.1689277935290385, 1625, 325,
//                7, 24, 2.097395632808568, 1537, 322,
//                8, 10, 2.3722683340699433, 1990, 314,
//                8, 18, 2.127560134412306, 2131, 310,
//                8, 20, 2.146903893975849, 2270, 310,
//                8, 24, 2.0783823125303242, 2244, 315,
//                9, 12, 2.228793858569091, 3609, 302,
//                9, 14, 2.157263044381975, 3573, 304,
//                9, 16, 2.131986997469965, 3813, 307,
//                9, 18, 2.088727997602901, 3888, 305,
//                9, 20, 2.085344159281969, 4008, 304,
//                9, 24, 2.0510659982789283, 4119, 312,
//                9, 28, 2.006607237192625, 4283, 311,
//                9, 32, 1.9651353563942207, 4473, 314,
//                9, 64, 1.8612538090483068, 5012, 335,
//                10, 32, 1.9459898065405232, 8674, 310,
//                10, 64, 1.7997964108894018, 14669, 317,
//                11, 32, 1.921768633858763, 19027, 302,
//                11, 64, 1.7817167768394646, 26900, 318,
//                12, 64, 1.7734789550806909, 54813, 310,
//                13, 128, 1.6908858307695058, 179575, 338,
//                13, 192, 1.6529698752547937, 199952, 362,
//                14, 192, 1.6437121891329978, 402364, 372,
//                14, 256, 1.6302684001174041, 404552, 401,

                // improved_split_simple
//                4, 20, 2.48048, 542.205, 187.983,
//                4, 24, 2.42928, 548.34, 207.861,
//                4, 28, 2.41148, 541.045, 220.402,
//                4, 32, 2.39106, 587.445, 243.149,
//                4, 64, 2.29868, 655.455, 327.285,
//                4, 96, 2.29236, 786.245, 413.026,
//                4, 128, 2.288445, 906.31, 521.701,
//                4, 192, 2.291665, 1071.705, 697.729,
//                4, 256, 2.338615, 1222.465, 896.842,
//                5, 12, 2.481445, 590.775, 169.932,
//                5, 14, 2.448975, 571.65, 180.65,
//                5, 16, 2.39643, 596.26, 181.333,
//                5, 18, 2.36181, 753.025, 186.659,
//                5, 20, 2.329635, 609.895, 199.902,
//                5, 24, 2.293775, 653.46, 209.456,
//                5, 28, 2.27104, 655.55, 214.243,
//                5, 32, 2.236775, 650.24, 233.336,
//                5, 64, 2.13028, 702.23, 298.263,
//                5, 96, 2.09587, 834.61, 369.641,
//                5, 128, 2.069325, 848.365, 441.676,
//                5, 192, 2.046835, 1037.25, 570.772,
//                5, 256, 2.040805, 1006.82, 677.424,
//                5, 512, 2.03622, 1288.425, 1194.245,
//                6, 12, 2.422205, 679.755, 157.864,
//                6, 14, 2.348045, 667.87, 167.241,
//                6, 16, 2.32142, 676.895, 169.298,
//                6, 18, 2.278715, 669.18, 175.292,
//                6, 20, 2.24959, 692.475, 188.489,
//                6, 24, 2.22949, 711.53, 204.391,
//                6, 28, 2.214285, 970.4, 212.011,
//                6, 32, 2.17879, 746.96, 225.202,
//                6, 64, 2.08618, 948.195, 296.483,
//                6, 96, 2.046315, 841.445, 357.629,
//                6, 128, 2.018775, 893.045, 424.116,
//                6, 192, 2.009245, 955.695, 542.052,
//                6, 256, 1.999575, 1060.675, 625.659,
//                6, 512, 1.981275, 1173.515, 1056.154,
//                7, 10, 2.40649, 934.015, 134.917,
//                7, 12, 2.342685, 963.06, 143.637,
//                7, 14, 2.256735, 969.365, 150.691,
//                7, 16, 2.199585, 1011.25, 155.369,
//                7, 18, 2.153345, 1021.715, 158.227,
//                7, 20, 2.144645, 1044.6, 158.149,
//                7, 24, 2.07744, 1116.36, 172.383,
//                7, 28, 2.058695, 1117.425, 175.712,
//                7, 32, 2.041425, 1171.02, 179.791,
//                7, 64, 1.9657, 1195.51, 246.424,
//                7, 96, 1.88927, 1239.09, 282.475,
//                7, 128, 1.865005, 1374.745, 334.15,
//                7, 192, 1.84498, 1498.185, 408.65,
//                7, 256, 1.837535, 1556.655, 484.289,
//                7, 512, 1.81903, 1750.75, 837.628,
//                8, 10, 2.37867, 1495.74, 141.054,
//                8, 12, 2.27321, 1456.335, 143.75,
//                8, 14, 2.22702, 1361.485, 147.132,
//                8, 16, 2.169285, 1352.785, 155.101,
//                8, 18, 2.121765, 1341.24, 155.674,
//                8, 20, 2.08732, 1433.205, 162.626,
//                8, 24, 2.04113, 1703.765, 155.698,
//                8, 28, 2.01393, 1872.255, 164.095,
//                8, 32, 1.980275, 1890.935, 172.217,
//                8, 64, 1.90684, 1933.78, 238.195,
//                8, 96, 1.86306, 1861.995, 276.053,
//                8, 128, 1.820795, 2277.445, 305.552,
//                8, 192, 1.808465, 2200.21, 384.153,
//                8, 256, 1.796845, 2432.63, 457.88,
//                8, 512, 1.772775, 2627.925, 703.463,
//                9, 10, 2.342775, 2684.44, 138.739,
//                9, 12, 2.23828, 2764.14, 138.49,
//                9, 14, 2.201795, 2536.575, 156.542,
//                9, 16, 2.14278, 2562.21, 151.358,
//                9, 18, 2.093535, 2484.925, 153.452,
//                9, 20, 2.064785, 2525.45, 159.702,
//                9, 24, 2.022555, 2510.515, 168.457,
//                9, 28, 1.99749, 2936.525, 170.246,
//                9, 32, 1.950545, 3745.315, 169.586,
//                9, 64, 1.85788, 2844.985, 211.073,
//                9, 96, 1.82558, 3854.355, 269.473,
//                9, 128, 1.78969, 3643.745, 292.384,
//                9, 192, 1.75526, 4951.505, 330.786,
//                9, 256, 1.75941, 4076.285, 421.23,
//                9, 512, 1.74503, 4833.62, 642.042,
//                9, 1024, 1.733485, 5085.565, 1089.779,
//                10, 10, 2.26647, 5994.385, 127.127,
//                10, 12, 2.20895, 6063.425, 133.45,
//                10, 14, 2.13613, 5793.905, 142.325,
//                10, 16, 2.116405, 5765.98, 149.818,
//                10, 18, 2.069445, 5045.955, 156.418,
//                10, 20, 2.0417, 5055.235, 157.168,
//                10, 24, 2.001495, 4501.335, 164.326,
//                10, 28, 1.97065, 4593.175, 166.087,
//                10, 32, 1.92606, 5303.8, 162.621,
//                10, 64, 1.80934, 8765.025, 191.302,
//                10, 96, 1.77682, 9685.165, 239.698,
//                10, 128, 1.73736, 10384.885, 255.39,
//                10, 192, 1.714485, 10500.3, 298.054,
//                10, 256, 1.697815, 10949.625, 340.407,
//                10, 512, 1.683975, 11039.485, 556.995,
//                10, 1024, 1.674175, 11566.535, 928.485,
//                11, 10, 2.25684, 12098.465, 122.634,
//                11, 12, 2.196525, 13093.21, 135.831,
//                11, 14, 2.12515, 11829.54, 139.618,
//                11, 16, 2.103765, 10143.83, 150.215,
//                11, 18, 2.050875, 8985.145, 152.343,
//                11, 20, 2.02091, 8399.96, 153.928,
//                11, 24, 1.961535, 8003.69, 155.773,
//                11, 28, 1.95324, 8601.655, 157.764,
//                11, 32, 1.907145, 10127.125, 160.339,
//                11, 64, 1.789405, 19404.98, 190.851,
//                11, 96, 1.754935, 19952.2, 234.153,
//                11, 128, 1.717035, 18210.85, 235.3,
//                11, 192, 1.69452, 23306.635, 279.228,
//                11, 256, 1.68079, 22824.155, 327.211,
//                11, 512, 1.669035, 22311.835, 527.925,
//                11, 1024, 1.65286, 25076.04, 845.709,
//                12, 10, 2.227455, 22643.33, 120.518,
//                12, 12, 2.174015, 26268.445, 133.791,
//                12, 14, 2.104935, 24317.83, 137.754,
//                12, 16, 2.05659, 21180.665, 145.368,
//                12, 18, 2.039165, 19377.72, 144.846,
//                12, 20, 2.006935, 21047.65, 153.12,
//                12, 24, 1.94188, 21689.085, 153.664,
//                12, 28, 1.936375, 22849.425, 158.15,
//                12, 32, 1.89074, 24265.935, 159.824,
//                12, 64, 1.75587, 53140.95, 175.05,
//                12, 96, 1.73322, 32236.755, 228.272,
//                12, 128, 1.69005, 55498.53, 229.207,
//                12, 192, 1.669415, 59977.9, 263.345,
//                12, 256, 1.656925, 60746.665, 300.781,
//                12, 512, 1.635245, 63767.805, 444.26,
//                12, 1024, 1.62973, 63569.64, 764.569,
//                13, 10, 2.21143, 48328.62, 115.192,
//                13, 12, 2.10655, 70906.805, 124.305,
//                13, 14, 2.07424, 80581.4, 134.342,
//                13, 16, 2.02719, 80590.855, 140.495,
//                13, 18, 1.98329, 72108.925, 144.81,
//                13, 20, 1.981005, 68867.005, 147.033,
//                13, 24, 1.921855, 66303.785, 153.31,
//                13, 28, 1.899895, 59542.925, 158.96,
//                13, 32, 1.877085, 49317.545, 159.739,
//                13, 64, 1.74228, 98851.095, 174.524,
//                13, 96, 1.70931, 101044.625, 213.047,
//                13, 128, 1.675095, 113230.025, 228.566,
//                13, 192, 1.66094, 129685.525, 270.841,
//                13, 256, 1.65179, 109093.085, 317.52,
//                13, 512, 1.624375, 144465.47, 445.139,
//                13, 1024, 1.61636, 142650.605, 736.177,
//                14, 10, 2.2058, 88520.57, 117.954,
//                14, 12, 2.10081, 150779.355, 120.79,
//                14, 14, 2.06992, 176648.28, 132.509,
//                14, 16, 2.02013, 180465.45, 133.61,
//                14, 18, 1.980155, 158706.445, 143.226,
//                14, 20, 1.977005, 136961.23, 146.619,
//                14, 24, 1.91441, 112793.52, 152.261,
//                14, 28, 1.891705, 99822.595, 154.993,
//                14, 32, 1.867235, 84616.375, 156.02,
//                14, 64, 1.741715, 146225.17, 173.922,
//                14, 96, 1.734425, 100017.37, 214.876,
//                14, 128, 1.67377, 183360.02, 232.579,
//                14, 192, 1.65015, 265466.69, 256.558,
//                14, 256, 1.63248, 280133.905, 284.565,
//                14, 512, 1.6124, 266907.36, 419.022,
//                14, 1024, 1.596, 347519.705, 622.838,
//                15, 10, 2.195685, 150867.115, 118.481,
//                15, 12, 2.07947, 282712.365, 121.882,
//                15, 14, 2.01334, 373176.395, 135.476,
//                15, 16, 2.000635, 402008.86, 137.389,
//                15, 18, 1.963445, 351145.795, 140.495,
//                15, 20, 1.965355, 307988.545, 147.11,
//                15, 24, 1.905775, 258812.12, 153.401,
//                15, 28, 1.880975, 284525.995, 161.962,
//                15, 32, 1.857065, 261793.815, 163.351,
//                15, 64, 1.728615, 385004.37, 175.091,
//                15, 96, 1.67177, 793105.765, 241.753,
//                15, 128, 1.658245, 609987.68, 242.138,
//                15, 192, 1.632715, 822227.365, 295.025,
//                15, 256, 1.62191, 673538.2, 317.271,
//                15, 512, 1.594745, 856301.05, 423.374,
//                15, 1024, 1.58679, 835599.4, 645.089,
//                16, 10, 2.192835, 248874.97, 116.926,
//                16, 12, 2.072645, 580146.355, 116.796,
//                16, 14, 2.001895, 921183.485, 129.44,
//                16, 16, 1.98756, 1098012.84, 139.59,
//                16, 18, 1.949805, 1059253.645, 144.09,
//                16, 20, 1.928705, 929469.745, 146.691,
//                16, 24, 1.898435, 625411.835, 153.217,
//                16, 28, 1.872735, 475906.27, 162.709,
//                16, 32, 1.834805, 379328.83, 160.678,
//                16, 64, 1.724945, 536426.38, 220.324,
//                16, 96, 1.663645, 1558653.495, 238.056,
//                16, 128, 1.65562, 1353223.825, 243.548,
//                16, 192, 1.624235, 1737980.76, 277.142,
//                16, 256, 1.612295, 1818499.86, 314.535,
//                16, 512, 1.585075, 2093046.415, 387.522,
//                16, 1024, 1.57934, 2179367.145, 613.495,
//                17, 10, 2.190335, 396320.4, 117.013,
//                17, 12, 2.06505, 951679.075, 124.288,
//                17, 14, 1.98992, 1505756.795, 129.896,
//                17, 16, 1.98164, 1794380.93, 140.186,
//                17, 18, 1.944195, 1706422.67, 145.83,
//                17, 20, 1.926945, 1351289.8, 151.975,
//                17, 24, 1.8967, 900890.055, 153.829,
//                17, 28, 1.86655, 913972.885, 165.015,
//                17, 32, 1.822715, 1086560.89, 159.539,
//                17, 64, 1.717095, 1023016.75, 208.903,
//                17, 96, 1.663115, 2264625.19, 225.333,
//                17, 128, 1.6467, 1849601.285, 262.772,
//                17, 192, 1.631145, 2260000.275, 284.572,
//                17, 256, 1.615295, 2569679.075, 324.995,
//                17, 512, 1.57983, 4903492.61, 391.586,
//                17, 1024, 1.572335, 5224942.645, 589.941,


                // Elias Fano, Java 7, 200'000, IMPROVED_SPLIT_RULES disabled
//                4, 20, 2.470905, 531.61, 197.398,
//                4, 24, 2.41963, 568.145, 207.133,
//                4, 28, 2.398395, 567.185, 225.119,
//                4, 32, 2.37902, 604.32, 239.061,
//                4, 64, 2.249965, 642.395, 335.572,
//                4, 96, 2.21621, 715.185, 409.494,
//                4, 128, 2.194625, 742.52, 488.872,
//                4, 192, 2.17983, 804.17, 640.52,
//                4, 256, 2.168565, 877.52, 788.277,
//                5, 12, 2.458, 602.225, 158.36,
//                5, 14, 2.375055, 608.48, 164.219,
//                5, 16, 2.34033, 620.12, 166.763,
//                5, 18, 2.295295, 630.01, 174.235,
//                5, 20, 2.261475, 657.19, 166.937,
//                5, 24, 2.232125, 606.675, 181.288,
//                5, 28, 2.21222, 623.59, 186.955,
//                5, 32, 2.172215, 672.1, 199.667,
//                5, 64, 2.064325, 691.135, 260.398,
//                5, 96, 2.019225, 770.985, 306.411,
//                5, 128, 1.99705, 758.04, 374.651,
//                5, 192, 1.98014, 885.875, 450.713,
//                5, 256, 1.964155, 883.88, 569.645,
//                5, 512, 1.94885, 995.81, 938.224,
//                6, 12, 2.41533, 670.18, 144.191,
//                6, 14, 2.32433, 754.12, 149.013,
//                6, 16, 2.29281, 701.435, 155.742,
//                6, 18, 2.236085, 709.57, 158.417,
//                6, 20, 2.19864, 750.54, 164.125,
//                6, 24, 2.143515, 753.055, 169.618,
//                6, 28, 2.14354, 777.41, 173.123,
//                6, 32, 2.1053, 756.74, 187.027,
//                6, 64, 1.99434, 912.135, 237.705,
//                6, 96, 1.9514, 886.66, 281.506,
//                6, 128, 1.929665, 960.31, 346.94,
//                6, 192, 1.911185, 1037.55, 397.602,
//                6, 256, 1.896875, 1092.905, 484.627,
//                6, 512, 1.87757, 1294.395, 826.612,
//                7, 10, 2.407235, 929.085, 133.486,
//                7, 12, 2.34057, 976.235, 140.682,
//                7, 14, 2.25626, 1022.26, 146.484,
//                7, 16, 2.194895, 1016.405, 155.009,
//                7, 18, 2.147625, 1030.625, 155.313,
//                7, 20, 2.139175, 1064.085, 158.7,
//                7, 24, 2.075395, 1100.655, 158.711,
//                7, 28, 2.05703, 1126.74, 169.578,
//                7, 32, 2.040645, 1119.86, 176.318,
//                7, 64, 1.92282, 1201.13, 224.148,
//                7, 96, 1.885075, 1255.05, 268.332,
//                7, 128, 1.861525, 1354.2, 303.348,
//                7, 192, 1.841595, 1422.635, 373.644,
//                7, 256, 1.832, 1457.54, 437.773,
//                7, 512, 1.813535, 1659.425, 718.17,
//                8, 10, 2.374405, 1524.01, 128.843,
//                8, 12, 2.26062, 1619.3, 138.92,
//                8, 14, 2.21941, 1682.965, 141.848,
//                8, 16, 2.15729, 1702.655, 150.036,
//                8, 18, 2.11754, 1745.77, 154.274,
//                8, 20, 2.116515, 1790.735, 157.817,
//                8, 24, 2.056035, 1875.415, 159.602,
//                8, 28, 2.021495, 2049.04, 165.693,
//                8, 32, 1.97279, 2253.855, 168.18,
//                8, 64, 1.86501, 2519.11, 203.176,
//                8, 96, 1.81827, 2678.035, 232.168,
//                8, 128, 1.79172, 2743.885, 264.59,
//                8, 192, 1.76805, 2862.525, 325.277,
//                8, 256, 1.76191, 2964.595, 386.131,
//                8, 512, 1.741125, 3186.06, 579.771,
//                8, 1024, 1.734195, 3431.95, 992.839,
//                9, 10, 2.33308, 2921.67, 126.492,
//                9, 12, 2.220135, 3079.505, 131.824,
//                9, 14, 2.14388, 3228.985, 135.728,
//                9, 16, 2.12304, 3336.66, 143.909,
//                9, 18, 2.079285, 3363.255, 144.216,
//                9, 20, 2.053395, 3495.825, 149.323,
//                9, 24, 2.029165, 3667.125, 151.586,
//                9, 28, 2.00448, 3832.785, 162.268,
//                9, 32, 1.96081, 4133.775, 166.158,
//                9, 64, 1.83966, 4695.99, 194.566,
//                9, 96, 1.7966, 4795.8, 225.375,
//                9, 128, 1.771115, 5047.68, 251.695,
//                9, 192, 1.750705, 5154.9, 305.649,
//                9, 256, 1.74, 5394.745, 346.547,
//                9, 512, 1.721885, 5566.685, 524.276,
//                9, 1024, 1.70978, 5713.12, 908.291,
//                10, 10, 2.26205, 5947.835, 123.408,
//                10, 12, 2.19927, 6757.7, 130.215,
//                10, 14, 2.11739, 6956.82, 133.934,
//                10, 16, 2.063445, 7278.955, 136.91,
//                10, 18, 2.04491, 7254.605, 138.898,
//                10, 20, 2.01783, 7595.075, 148.459,
//                10, 24, 1.99413, 8046.975, 145.846,
//                10, 28, 1.97355, 8273.41, 152.016,
//                10, 32, 1.94444, 8527.48, 161.704,
//                10, 64, 1.786515, 14256.225, 226.411,
//                10, 96, 1.75497, 14041.155, 258.34,
//                10, 128, 1.73047, 14866.12, 270.534,
//                10, 192, 1.70212, 16027.155, 306.938,
//                10, 256, 1.68637, 16439.44, 344.142,
//                10, 512, 1.664455, 17227.03, 498.827,
//                10, 1024, 1.652735, 17443.67, 727.342,
//                11, 10, 2.252615, 12481.5, 122.729,
//                11, 12, 2.1877, 14806.225, 124.975,
//                11, 14, 2.1082, 15984.395, 132.277,
//                11, 16, 2.0481, 16268.345, 134.219,
//                11, 18, 2.033125, 16860.275, 138.096,
//                11, 20, 2.000705, 17646.71, 143.937,
//                11, 24, 1.953535, 18600.325, 148.093,
//                11, 28, 1.94897, 18719.355, 151.751,
//                11, 32, 1.92184, 19596.005, 159.312,
//                11, 64, 1.769915, 27585.715, 218.831,
//                11, 96, 1.747495, 26992.02, 249.497,
//                11, 128, 1.71072, 28903.025, 264.075,
//                11, 192, 1.68457, 30589.52, 278.156,
//                11, 256, 1.670325, 30208.16, 311.294,
//                11, 512, 1.65012, 31505.045, 444.507,
//                11, 1024, 1.638485, 32038.875, 688.599,
//                12, 10, 2.22231, 24705.74, 165.762,
//                12, 12, 2.119925, 32694.4, 126.67,
//                12, 14, 2.082335, 36846.79, 130.963,
//                12, 16, 2.025845, 38237.275, 139.186,
//                12, 18, 1.98414, 39442.495, 159.341,
//                12, 20, 1.975065, 40671.705, 192.188,
//                12, 24, 1.924715, 44007.85, 192.783,
//                12, 28, 1.930985, 45227.92, 207.617,
//                12, 32, 1.898935, 46104.27, 203.27,
//                12, 64, 1.76138, 56904.4, 213.47,
//                12, 96, 1.723725, 57794.79, 222.003,
//                12, 128, 1.69288, 61194.555, 243.219,
//                12, 192, 1.66851, 62373.59, 280.033,
//                12, 256, 1.65517, 62835.26, 304.335,
//                12, 512, 1.634315, 64540.61, 440.262,
//                12, 1024, 1.625505, 65182.255, 652.904,
//                13, 10, 2.210815, 46968.995, 121.201,
//                13, 12, 2.104695, 70740.235, 131.175,
//                13, 14, 2.06871, 85441.665, 148.519,
//                13, 16, 2.02016, 94314.83, 182.841,
//                13, 18, 1.96975, 92865.16, 182.024,
//                13, 20, 1.96359, 95121.82, 184.699,
//                13, 24, 1.906365, 102406.62, 158.303,
//                13, 28, 1.892015, 107833.15, 197.621,
//                13, 32, 1.87882, 109796.23, 219.467,
//                13, 64, 1.78156, 128046.31, 217.352,
//                13, 96, 1.689325, 192932.635, 201.226,
//                13, 128, 1.686015, 177628.955, 214.069,
//                13, 192, 1.653795, 199516.91, 245.216,
//                13, 256, 1.631885, 208383.39, 285.236,
//                13, 512, 1.614825, 213491.69, 392.089,
//                13, 1024, 1.60361, 215338.425, 590.956,
//                14, 10, 2.20516, 83841.54, 113.454,
//                14, 12, 2.09932, 145263.425, 123.554,
//                14, 14, 2.066495, 185532.01, 156.049,
//                14, 16, 2.01251, 212825.645, 175.047,
//                14, 18, 1.97061, 222303.735, 175.905,
//                14, 20, 1.93663, 226160.615, 182.177,
//                14, 24, 1.897995, 231756.305, 142.045,
//                14, 28, 1.88113, 248882.52, 147.99,
//                14, 32, 1.867775, 262275.93, 151.812,
//                14, 64, 1.77499, 291933.53, 214.264,
//                14, 96, 1.691255, 385253.28, 209.619,
//                14, 128, 1.67255, 367162.19, 230.257,
//                14, 192, 1.64475, 398807.275, 260.316,
//                14, 256, 1.63077, 400178.26, 266.605,
//                14, 512, 1.609675, 420093.275, 393.8,
//                14, 1024, 1.597995, 421539.69, 565.925,
//                15, 10, 2.19504, 143709.415, 123.098,
//                15, 12, 2.077205, 281957.6, 148.828,
//                15, 14, 2.00704, 407922.98, 165.173,
//                15, 16, 1.99023, 515948.185, 177.669,
//                15, 18, 1.94782, 543192.28, 181.059,
//                15, 20, 1.91518, 565792.075, 143.719,
//                15, 24, 1.878835, 563904.165, 141.983,
//                15, 28, 1.85811, 598985.05, 148.883,
//                15, 32, 1.832645, 623808.285, 158.145,
//                15, 64, 1.754495, 706206.44, 182.353,
//                15, 96, 1.676545, 828029.2, 217.235,
//                15, 128, 1.654275, 844462.385, 230.093,
//                15, 192, 1.629975, 869058.975, 264.801,
//                15, 256, 1.624035, 862970.86, 293.028,
//                15, 512, 1.596255, 881522.125, 373.269,
//                15, 1024, 1.58612, 920050.94, 537.217,
//                16, 10, 2.19248, 231490.225, 148.896,
//                16, 12, 2.072425, 550874.24, 129.056,
//                16, 14, 1.998785, 914380.8, 126.612,
//                16, 16, 1.982985, 1188278.2, 133.524,
//                16, 18, 1.942255, 1325198.03, 136.67,
//                16, 20, 1.913635, 1401516.895, 140.11,
//                16, 24, 1.87398, 1403906.515, 142.839,
//                16, 28, 1.84712, 1459527.195, 147.986,
//                16, 32, 1.819705, 1566934.57, 154.035,
//                16, 64, 1.74261, 1738419.015, 183.85,
//                16, 96, 1.702985, 1894356.81, 229.92,
//                16, 128, 1.63374, 2955705.28, 219.608,
//                16, 192, 1.633705, 2692669.76, 262.579,
//                16, 256, 1.605415, 3106663.265, 289.028,
//                16, 512, 1.586955, 3130124.865, 360.31,
//                16, 1024, 1.573265, 3225744.865, 539.198,
//                17, 10, 2.18964, 403617.2, 111.84,
//                17, 12, 2.06287, 1058321.445, 116.22,
//                17, 14, 1.982145, 1907377.25, 122.586,
//                17, 16, 1.93782, 2757154.59, 131.185,
//                17, 18, 1.926615, 3331391.5, 134.022,
//                17, 20, 1.898345, 3534194.99, 137.826,
//                17, 24, 1.84277, 3639365.975, 141.108,
//                17, 28, 1.836025, 3619969.58, 144.644,
//                17, 32, 1.8045, 3893431.88, 151.667,
//                17, 64, 1.737125, 4569860.49, 176.539,
//                17, 96, 1.698355, 4780985.505, 217.297,
//                17, 128, 1.633505, 5969816.71, 239.5,
//                17, 192, 1.624175, 5864469.5, 265.114,
//                17, 256, 1.596265, 6203171.485, 285.022,
//                17, 512, 1.578285, 6432832.395, 370.582,
//                17, 1024, 1.569395, 6439802.705, 541.282,

                // Elias Fano, Java 7, 200'000, IMPROVED_SPLIT_RULES = true
//                4, 20, 2.48048, 512.325, 187.492,
//                4, 24, 2.42928, 522.44, 199.791,
//                4, 28, 2.41148, 541.0, 203.64,
//                4, 32, 2.39106, 548.22, 216.052,
//                4, 64, 2.29868, 631.86, 309.16,
//                4, 96, 2.29236, 736.03, 405.923,
//                4, 128, 2.288445, 835.855, 474.497,
//                4, 192, 2.291665, 1029.565, 653.614,
//                4, 256, 2.338615, 1150.045, 830.998,
//                5, 12, 2.49213, 569.56, 156.05,
//                5, 14, 2.45962, 591.465, 159.745,
//                5, 16, 2.406045, 592.14, 170.758,
//                5, 18, 2.36519, 573.265, 175.087,
//                5, 20, 2.3282, 585.93, 181.257,
//                5, 24, 2.294605, 629.065, 188.515,
//                5, 28, 2.272095, 603.55, 197.512,
//                5, 32, 2.241275, 617.39, 209.133,
//                5, 64, 2.129795, 676.85, 278.654,
//                5, 96, 2.095895, 777.125, 333.663,
//                5, 128, 2.0692, 817.78, 396.659,
//                5, 192, 2.04735, 862.545, 511.027,
//                5, 256, 2.04075, 922.57, 629.603,
//                5, 512, 2.03622, 1164.66, 1091.621,
//                6, 12, 2.408935, 623.395, 143.725,
//                6, 14, 2.32586, 671.455, 149.329,
//                6, 16, 2.29345, 688.095, 155.945,
//                6, 18, 2.23773, 679.62, 159.455,
//                6, 20, 2.20193, 702.43, 159.165,
//                6, 24, 2.145385, 762.84, 164.981,
//                6, 28, 2.146795, 785.365, 172.633,
//                6, 32, 2.109045, 767.41, 183.731,
//                6, 64, 1.99843, 861.545, 229.73,
//                6, 96, 1.951715, 889.78, 275.149,
//                6, 128, 1.93365, 930.85, 316.318,
//                6, 192, 1.916535, 1007.91, 401.383,
//                6, 256, 1.90533, 1108.97, 494.761,
//                6, 512, 1.8973, 1418.46, 844.836,
//                7, 10, 2.40649, 910.04, 134.784,
//                7, 12, 2.342685, 993.155, 142.055,
//                7, 14, 2.256735, 927.335, 146.97,
//                7, 16, 2.199585, 973.33, 149.324,
//                7, 18, 2.153345, 962.96, 156.355,
//                7, 20, 2.144645, 987.305, 157.497,
//                7, 24, 2.077455, 1071.125, 162.731,
//                7, 28, 2.05867, 1096.12, 169.757,
//                7, 32, 2.04204, 1108.09, 177.653,
//                7, 64, 1.932225, 1235.985, 218.343,
//                7, 96, 1.88419, 1275.755, 259.539,
//                7, 128, 1.8626, 1355.63, 300.261,
//                7, 192, 1.84437, 1396.935, 373.008,
//                7, 256, 1.8383, 1544.06, 442.3,
//                7, 512, 1.823355, 1750.82, 740.437,
//                8, 10, 2.374485, 1514.07, 129.072,
//                8, 12, 2.263715, 1467.805, 135.175,
//                8, 14, 2.2227, 1413.265, 139.292,
//                8, 16, 2.16154, 1380.64, 145.35,
//                8, 18, 2.12091, 1352.48, 148.251,
//                8, 20, 2.08644, 1387.02, 148.455,
//                8, 24, 2.040295, 1629.39, 152.894,
//                8, 28, 2.006125, 1910.88, 160.54,
//                8, 32, 1.95964, 2201.905, 159.756,
//                8, 64, 1.85237, 2434.215, 199.322,
//                8, 96, 1.81621, 2637.71, 227.705,
//                8, 128, 1.793235, 2762.435, 271.012,
//                8, 192, 1.77067, 2787.885, 318.298,
//                8, 256, 1.760585, 2907.465, 376.116,
//                8, 512, 1.74589, 3209.165, 603.672,
//                8, 1024, 1.742855, 3635.42, 1057.028,
//                9, 10, 2.33629, 2814.55, 126.652,
//                9, 12, 2.227765, 2857.27, 132.771,
//                9, 14, 2.155205, 2838.27, 141.183,
//                9, 16, 2.133065, 2743.4, 157.977,
//                9, 18, 2.085855, 2598.85, 147.983,
//                9, 20, 2.06114, 2421.91, 150.531,
//                9, 24, 2.02023, 2145.005, 156.36,
//                9, 28, 1.993545, 2461.175, 160.944,
//                9, 32, 1.94532, 2972.725, 157.951,
//                9, 64, 1.836165, 4199.4, 195.934,
//                9, 96, 1.797485, 4508.95, 216.692,
//                9, 128, 1.772115, 4760.695, 243.604,
//                9, 192, 1.747785, 4931.75, 297.077,
//                9, 256, 1.73752, 5074.6, 350.191,
//                9, 512, 1.721915, 5358.975, 544.411,
//                9, 1024, 1.72051, 5765.0, 946.249,
//                10, 10, 2.31985, 5532.26, 127.423,
//                10, 12, 2.21901, 5695.73, 132.357,
//                10, 14, 2.153965, 5402.715, 150.689,
//                10, 16, 2.13306, 5406.525, 144.521,
//                10, 18, 2.085745, 5197.74, 150.922,
//                10, 20, 2.05117, 5060.285, 149.832,
//                10, 24, 2.005075, 4946.91, 153.765,
//                10, 28, 1.968035, 4882.67, 159.438,
//                10, 32, 1.924895, 5276.94, 158.758,
//                10, 64, 1.810935, 8778.07, 192.856,
//                10, 96, 1.767075, 9695.245, 207.671,
//                10, 128, 1.73814, 9774.565, 233.667,
//                10, 192, 1.718085, 9978.115, 279.348,
//                10, 256, 1.70646, 10380.25, 325.488,
//                10, 512, 1.692565, 10735.725, 517.318,
//                10, 1024, 1.68614, 11369.23, 869.157,
//                11, 10, 2.26196, 11681.355, 126.062,
//                11, 12, 2.210445, 12090.35, 129.264,
//                11, 14, 2.15326, 10860.655, 142.715,
//                11, 16, 2.138095, 9001.275, 145.573,
//                11, 18, 2.091575, 7605.06, 152.51,
//                11, 20, 2.056725, 7407.825, 153.707,
//                11, 24, 2.00323, 7526.725, 158.037,
//                11, 28, 1.957745, 8824.12, 158.663,
//                11, 32, 1.909345, 10359.315, 160.264,
//                11, 64, 1.772895, 25984.87, 178.063,
//                11, 96, 1.731035, 24138.265, 200.68,
//                11, 128, 1.713125, 27240.675, 221.134,
//                11, 192, 1.69108, 27817.545, 259.051,
//                11, 256, 1.67512, 28034.72, 301.68,
//                11, 512, 1.655815, 29773.44, 449.153,
//                11, 1024, 1.65083, 27722.74, 749.245,
//                12, 10, 2.232555, 21684.515, 118.031,
//                12, 12, 2.188375, 24816.085, 131.308,
//                12, 14, 2.136095, 22334.98, 137.327,
//                12, 16, 2.131525, 17667.01, 141.235,
//                12, 18, 2.09187, 15266.93, 146.799,
//                12, 20, 2.05911, 15722.29, 153.575,
//                12, 24, 1.998115, 17725.66, 152.031,
//                12, 28, 1.946535, 20558.46, 156.045,
//                12, 32, 1.89468, 23382.52, 153.817,
//                12, 64, 1.75713, 50011.425, 168.481,
//                12, 96, 1.71889, 48595.12, 190.094,
//                12, 128, 1.69678, 56721.185, 217.878,
//                12, 192, 1.673845, 58555.555, 251.484,
//                12, 256, 1.66158, 60103.57, 279.879,
//                12, 512, 1.64087, 62022.52, 421.797,
//                12, 1024, 1.636115, 62682.005, 697.759,
//                13, 10, 2.210815, 46633.88, 114.862,
//                13, 12, 2.104695, 69929.665, 116.099,
//                13, 14, 2.06868, 85122.835, 128.55,
//                13, 16, 2.020125, 93111.61, 131.044,
//                13, 18, 1.96981, 91965.28, 136.545,
//                13, 20, 1.93844, 91637.88, 135.952,
//                13, 24, 1.905935, 85360.755, 140.874,
//                13, 28, 1.890695, 71220.105, 150.175,
//                13, 32, 1.87284, 62915.33, 153.989,
//                13, 64, 1.741925, 95439.845, 167.771,
//                13, 96, 1.700325, 117642.56, 183.434,
//                13, 128, 1.67455, 118047.255, 207.787,
//                13, 192, 1.656405, 124605.6, 244.722,
//                13, 256, 1.642845, 130119.215, 276.055,
//                13, 512, 1.62088, 133387.9, 415.556,
//                13, 1024, 1.61508, 137823.6, 653.189,
//                14, 10, 2.20516, 85786.615, 116.196,
//                14, 12, 2.09932, 149587.88, 118.289,
//                14, 14, 2.06649, 190811.015, 128.583,
//                14, 16, 2.012475, 218382.685, 132.342,
//                14, 18, 1.970125, 225597.945, 133.783,
//                14, 20, 1.93746, 221999.445, 139.745,
//                14, 24, 1.89763, 191213.015, 144.212,
//                14, 28, 1.879945, 144918.735, 151.997,
//                14, 32, 1.86595, 109697.295, 152.652,
//                14, 64, 1.737575, 162423.67, 166.307,
//                14, 96, 1.68244, 372972.755, 228.849,
//                14, 128, 1.667675, 312236.055, 246.35,
//                14, 192, 1.643375, 383708.085, 273.699,
//                14, 256, 1.627495, 383618.075, 307.331,
//                14, 512, 1.612215, 406045.51, 377.666,
//                14, 1024, 1.602745, 419758.895, 613.333,
//                15, 10, 2.19504, 146619.355, 111.976,
//                15, 12, 2.077205, 287076.2, 121.578,
//                15, 14, 2.00704, 421559.075, 129.984,
//                15, 16, 1.99023, 529179.905, 131.414,
//                15, 18, 1.947735, 555597.37, 136.639,
//                15, 20, 1.915185, 569832.705, 137.801,
//                15, 24, 1.878695, 527880.235, 141.678,
//                15, 28, 1.858525, 460067.35, 147.99,
//                15, 32, 1.830895, 339825.68, 155.367,
//                15, 64, 1.727485, 402200.83, 205.692,
//                15, 96, 1.67126, 767329.495, 216.997,
//                15, 128, 1.65341, 761072.575, 239.168,
//                15, 192, 1.62686, 861076.8, 266.652,
//                15, 256, 1.618475, 800519.57, 292.045,
//                15, 512, 1.59838, 873461.75, 393.447,
//                15, 1024, 1.58921, 900375.855, 591.985,
//                16, 10, 2.19248, 237202.64, 157.263,
//                16, 12, 2.072425, 566139.105, 125.365,
//                16, 14, 1.998785, 934930.44, 131.752,
//                16, 16, 1.982985, 1217565.345, 133.588,
//                16, 18, 1.942285, 1387565.16, 136.453,
//                16, 20, 1.913775, 1438086.85, 141.268,
//                16, 24, 1.873775, 1424060.21, 145.843,
//                16, 28, 1.846725, 1333494.76, 151.103,
//                16, 32, 1.818285, 1126361.91, 157.529,
//                16, 64, 1.72333, 576836.96, 210.774,
//                16, 96, 1.6634, 1525764.045, 218.326,
//                16, 128, 1.641725, 1919115.55, 227.214,
//                16, 192, 1.62129, 1815559.185, 232.165,
//                16, 256, 1.612415, 1827617.57, 290.803,
//                16, 512, 1.59076, 2086348.4, 391.111,
//                16, 1024, 1.57934, 2087350.045, 558.129,
//                17, 10, 2.18964, 401031.365, 125.065,
//                17, 12, 2.06287, 1045783.635, 122.734,
//                17, 14, 1.982145, 1891244.035, 127.894,
//                17, 16, 1.93782, 2745287.44, 133.509,
//                17, 18, 1.926575, 3319014.455, 144.654,
//                17, 20, 1.898375, 3520220.58, 141.428,
//                17, 24, 1.84248, 3537904.71, 144.53,
//                17, 28, 1.836415, 3107551.58, 149.173,
//                17, 32, 1.802425, 2472730.47, 152.651,
//                17, 64, 1.71758, 1325601.97, 207.873,
//                17, 96, 1.65917, 3098177.73, 212.668,
//                17, 128, 1.633325, 4726102.23, 215.806,
//                17, 192, 1.61545, 4100457.075, 267.917,
//                17, 256, 1.603505, 4421849.97, 296.195,
//                17, 512, 1.58355, 4990337.785, 349.06,
//                17, 1024, 1.57532, 5113673.05, 547.186,
        };
        for (int i = 0; i < data.length; i += 5) {
            FunctionInfo info = new FunctionInfo();
            info.leafSize = (int) data[i];
            info.averageBucketSize = (int) data[i + 1];
            info.bitsPerKey = data[i + 2];
            info.generateNanos = data[i + 3];
            info.evaluateNanos = data[i + 4];
            list.add(info);
        }
//        printTables(list);

//        int[] pairs = new int[] { 4, 20, 4, 24, 5, 20, 5, 24, 5, 64, 5, 128, 6, 128, 6, 256,
//                7, 256, 7, 512, 8, 128, 8, 256, 8, 512, 9, 256, 9, 512, 10, 12,
//                10, 256, 10, 512, 10, 1024, 11, 14, 11, 24, 11, 28, 11, 32, 11,
//                64, 11, 128, 11, 1024, 12, 32, 12, 64, 12, 128, 12, 512, 12,
//                1024, 13, 28, 13, 512, 13, 1024, 14, 28, 14, 128, 14, 256, 14,
//                1024, 15, 14, 15, 20, 15, 28, 15, 32, 15, 64, 15, 128, 15, 256,
//                15, 512, 16, 16, 16, 20, 16, 28, 16, 32, 16, 64, 16, 128, 16,
//                256, 16, 512, };
//        for (int i = 0; i < pairs.length; i += 2) {
//            int leafSize = pairs[i], averageBucketSize = pairs[i + 1];
//            double expectedBits = SpaceEstimator.getExpectedSpace(leafSize,
//                    averageBucketSize);
//            if (expectedBits > 2.6) {
//                continue;
//            }
//            FunctionInfo info = test(leafSize, averageBucketSize, size, true, 5, true);
//            if (info.bitsPerKey > 2.35) {
//                continue;
//            }
//            if (info.evaluateNanos > 950) {
//                continue;
//            }
//            System.out.println("  " + info.leafSize + ", " + info.averageBucketSize +
//                    ", " + info.bitsPerKey + ", " + info.generateNanos + ", " +
//                    info.evaluateNanos + ",");
//            list.add(info);
//        }

//        for (int leafSize = 4; leafSize <= 17; leafSize++) {
//            for (int averageBucketSize : new int[] {
//                    10, 12, 14, 16, 18, 20, 24, 28, 32,
//                    64, 96, 128, 192, 256, 512, 1024 }) {
//                double expectedBits = SpaceEstimator.getExpectedSpace(leafSize, averageBucketSize);
//                if (expectedBits > 3.2) {
//                    continue;
//                }
//                FunctionInfo info = test(leafSize, averageBucketSize, size, true, 5, true);
//                if (info.bitsPerKey > 2.5) {
//                    continue;
//                }
//                if (info.evaluateNanos >  1200) {
//                    continue;
//                }
//                System.out.println("  " + info.leafSize + ", " +
//                        info.averageBucketSize + ", " + info.bitsPerKey + ", " +
//                        info.generateNanos + ", " + info.evaluateNanos + ",");
//                list.add(info);
//            }
//        }

        Collections.sort(list, new Comparator<FunctionInfo>() {
            @Override
            public int compare(FunctionInfo o1, FunctionInfo o2) {
                return Double.compare(o1.bitsPerKey, o2.bitsPerKey);
            }
        });
        FunctionInfo last;
        ArrayList<FunctionInfo> evaluate = new ArrayList<FunctionInfo>();
        last = null;
        for (FunctionInfo info : list) {
            if (last == null) {
                last = info;
                continue;
            }
            if (info.evaluateNanos < last.evaluateNanos) {
                evaluate.add(info);
                last = info;
            }
        }
        last = null;
        ArrayList<FunctionInfo> generate = new ArrayList<FunctionInfo>();
        for (FunctionInfo info : list) {
            if (last == null) {
                last = info;
                continue;
            }
            if (info.generateNanos < last.generateNanos) {
                generate.add(info);
                last = info;
            }
        }
        last = null;
        ArrayList<FunctionInfo> balanced = new ArrayList<FunctionInfo>();
        double bestScore = Double.MAX_VALUE;
        for (FunctionInfo info : list) {
            if (info.bitsPerKey > 2.26 && info.generateNanos > 2000) {
                continue;
            }
            if (last == null) {
                balanced.add(info);
                last = info;
                continue;
            }
            double score = 500 * info.evaluateNanos + info.generateNanos;
            if (score > bestScore) {
                continue;
            }
            bestScore = score;
            if (info.evaluateNanos > last.evaluateNanos * 1.02) {
                continue;
            }
            if (info.generateNanos > last.generateNanos * 1.02) {
                continue;
            }
            last = info;
            balanced.add(info);
        }
        HashSet<FunctionInfo> used = new HashSet<FunctionInfo>();
        System.out.println("Balanced: generation time");
        for (FunctionInfo info : balanced) {
            System.out.println("        (" + info.bitsPerKey + ", " + info.generateNanos + ")");
        }
        System.out.println("Balanced: evaluation time");
        for (FunctionInfo info : balanced) {
            used.add(info);
            System.out.println("        (" + info.bitsPerKey + ", " + info.evaluateNanos + ")");
        }
//        System.out.println("Best Generation: evaluation time");
//        for (FunctionInfo info : generate) {
//            used.add(info);
//            System.out.println("        (" + info.bitsPerKey + ", " + info.evaluateNanos + ")");
//        }
//        System.out.println("Best Evaluation: evaluation time");
//        for (FunctionInfo info : evaluate) {
//            used.add(info);
//            System.out.println("        (" + info.bitsPerKey + ", " + info.evaluateNanos + ")");
//        }
//        System.out.println("Best Generation: generation time");
//        for (FunctionInfo info : generate) {
//            System.out.println("        (" + info.bitsPerKey + ", " + info.generateNanos + ")");
//        }
//        System.out.println("Best Evaluation: generation time");
//        for (FunctionInfo info : evaluate) {
//            System.out.println("        (" + info.bitsPerKey + ", " + info.generateNanos + ")");
//        }
        ArrayList<FunctionInfo> usedList = new ArrayList<FunctionInfo>(used);
        Collections.sort(usedList, new Comparator<FunctionInfo>() {
            @Override
            public int compare(FunctionInfo o1, FunctionInfo o2) {
                int comp = Integer.compare(o1.leafSize, o2.leafSize);
                if (comp != 0) {
                    return comp;
                }
                return Integer.compare(o1.averageBucketSize, o2.averageBucketSize);
            }
        });
        System.out.println("All used");
        for (FunctionInfo info : usedList) {
            System.out.println(info.leafSize + ", " + info.averageBucketSize + ", ");
        }
    }

    private static void printTables(ArrayList<FunctionInfo> list) {
        System.out.println("Space");
        printTables(list, 0);
        System.out.println("Generation");
        printTables(list, 1);
        System.out.println("Evaluation");
        printTables(list, 2);
    }

    private static void printTables(ArrayList<FunctionInfo> list, int type) {
        System.out.print(" ");
        for (int averageBucketSize : new int[] { 10, 12, 16, 32, 64, 128, 256,
                512, 1024 }) {
            System.out.print(" & " + averageBucketSize);
        }
        System.out.println(" \\\\");
        for (int leafSize = 5; leafSize <= 17; leafSize++) {
            System.out.print(leafSize);
            for (int averageBucketSize : new int[] { 10, 12, 16, 32, 64, 128, 256,
                    512, 1024 }) {
                boolean found = false;
                System.out.print(" & ");
                for (FunctionInfo info : list) {
                    if (leafSize != info.leafSize ||
                            averageBucketSize != info.averageBucketSize) {
                        continue;
                    }
                    if (type == 0) {
                        System.out.printf("%1.2f", info.bitsPerKey);
                        found = true;
                    } else if (type == 1) {
                        System.out.printf("%1.1f", info.generateNanos / 1000);
                        found = true;
                    } else {
                        System.out.printf("%d", (int) info.evaluateNanos);
                        found = true;
                    }
                }
                if (!found) {
                    System.out.print(" ");
                }
            }
            System.out.println(" \\\\");
        }
    }

    public static void printGenerationTimeVersusSpace() {
        System.out.println("B Generation Time Versus Space");
        int size = 10000;
        System.out.println("size: " + size);
        ArrayList<FunctionInfo> list = new ArrayList<FunctionInfo>();
        outer:
        for (int leafSize = 2; leafSize <= 20; leafSize++) {
            int minAverageBucketSize = 16;
            for (int averageBucketSize = minAverageBucketSize; averageBucketSize < 8 * 1024; averageBucketSize *= 2) {
                System.out.println("leafSize " + leafSize + " " + averageBucketSize);
                FunctionInfo info = test(leafSize, averageBucketSize, size, true);
                if (info.generateNanos >= 1000000) {
                    if (averageBucketSize == minAverageBucketSize) {
                        // done
                        break outer;
                    }
                    // next leaf size
                    break;
                }
                if (info.bitsPerKey < 2.4) {
                    list.add(info);
                }
            }
        }
        Collections.sort(list, new Comparator<FunctionInfo>() {

            @Override
            public int compare(FunctionInfo o1, FunctionInfo o2) {
                int comp = Double.compare(o1.generateNanos, o2.generateNanos);
                if (comp == 0) {
                    comp = Double.compare(o1.bitsPerKey, o2.bitsPerKey);
                }
                return comp;
            }

        });
        FunctionInfo last = null;
        int minAverageBucketSize = Integer.MAX_VALUE, maxAverageBucketSize = 0;
        int minLeafSize = Integer.MAX_VALUE, maxLeafSize = 0;
        for (FunctionInfo info : list) {
            if (last != null && info.bitsPerKey > last.bitsPerKey) {
                continue;
            }
            System.out.println("        (" + info.bitsPerKey + ", " + info.generateNanos + ")");
            minAverageBucketSize = Math.min(minAverageBucketSize, info.averageBucketSize);
            maxAverageBucketSize = Math.max(maxAverageBucketSize, info.averageBucketSize);
            minLeafSize = Math.min(minLeafSize, info.leafSize);
            maxLeafSize = Math.max(maxLeafSize, info.leafSize);
            last = info;
        }
        System.out.println("for averageBucketSize between " + minAverageBucketSize + " and " + maxAverageBucketSize);
        System.out.println("and leafSize between " + minLeafSize + " and " + maxLeafSize);
        last = null;
        System.out.println("bits/key leafSize averageBucketSize evalTime genTime");
        for (FunctionInfo info : list) {
            if (last != null && info.bitsPerKey > last.bitsPerKey) {
                continue;
            }
            System.out.println(info.bitsPerKey + " " + info.leafSize + " " + info.averageBucketSize +
                    " " + info.evaluateNanos + " " + info.generateNanos);
            last = info;
        }
    }

    public static void runTests() {
        int[] pairs = {
                23, 828, 23, 1656, 23, 3312,
                23, 6624, 25, 1250, 25,
                3750, 25, 7500, 25, 15000 };
        for (int i = 0; i < pairs.length; i += 2) {
            int leafSize = pairs[i], size = pairs[i + 1];
            FunctionInfo info = test(leafSize, size, size, true);
            System.out.println(new Timestamp(System.currentTimeMillis()).toString());
            System.out.println(info);
        }
    }

    static void verifyParameters() {
        System.out.println("4.1 Parameters");
        // size 100000
        // CHD: generated in 1.52 seconds, 2.257 bits/key, eval 219 nanoseconds/key
        // GOV: generated in 0.32 seconds, 2.324 bits/key, eval 207 nanoseconds/key
        // size 1000000
        // CHD:
        // GOV:
        RandomizedTest.test(8, 1024, 8 * 1024, true);
        for (int i = 0; i < 5; i++) {
            if (verifyOneTest()) {
                return;
            }
            RandomizedTest.test(8, 1024, 8 * 1024, true);
        }
        Assert.fail();
    }

    static void verifyParametersBestSize() {
        // System.out.println(RandomizedTest.test(23, 828, 828, true));
        System.out.println(RandomizedTest.test(23, 1656, 1656, true));
        // System.out.println(RandomizedTest.test(23, 3312, 3312, true));
        // System.out.println(RandomizedTest.test(23, 6624, 6624, true));
        // System.out.println(RandomizedTest.test(25, 1250, 1250, true));
        // System.out.println(RandomizedTest.test(25, 3750, 3750, true));
        // System.out.println(RandomizedTest.test(25, 7500, 7500, true));
        // System.out.println(RandomizedTest.test(25, 15000, 15000, true));

        // size: 1656 leafSize: 23 averageBucketSize: 1656 bitsPerKey: 1.517512077294686
        // generateSeconds: 907.279643 evaluateNanosPerKey: 554.3478260869565
        // size: 1250 leafSize: 25 averageBucketSize: 1250 bitsPerKey: 1.5112
        // generateSeconds: 7416.210937 evaluateNanosPerKey: 312.8
    }

    private static boolean verifyOneTest() {
        int size = 100_000;
        int leafSize = 11;
        int averageBucketSize = 12;
        for (int j = 0; j < 5; j++) {
            System.gc();
        }
        System.out.println("  size " + size + " leafSize " + leafSize + " averageBucketSize " + averageBucketSize);
        FunctionInfo info = RandomizedTest.test(leafSize, averageBucketSize, size, true);
        System.out.println("  " + info.bitsPerKey + " bits/key");
        System.out.println("  " + info.generateNanos * size / 1_000_000_000 +
                " seconds to generate");
        System.out.println("  " + info.evaluateNanos +
                " nanoseconds to evaluate");
        if (info.bitsPerKey < 2.27 &&
                info.generateNanos * size / 1_000_000_000 < 0.5 &&
                info.evaluateNanos < 250) {
            // all tests passed
            return true;
        }
        return false;
    }

    public static void experimentalResults() {
        System.out.println("6 Experimental Results");
        int size = 1_000_000;
        System.out.println("size " + size);
//        experimentalResults(size, 16);
//        experimentalResults(size, 64);
//        experimentalResults(size, 128);
        experimentalResults(size, 1024);
//        experimentalResults(size, 4096);
    }

    private static void experimentalResults(int size, int averageBucketSize) {
        System.out.println("averageBucketSize " + averageBucketSize);
        System.out.println("leafSize, bits/key");
        System.out.println("calculated");
        double last = 10;
        for (int leafSize = 6; leafSize <= 18; leafSize++) {
            double bitsPerKey = SpaceEstimator.getExpectedSpace(leafSize, averageBucketSize);
            if (bitsPerKey > last) {
                System.out.println("% increased");
            }
            last = bitsPerKey;
            System.out.println("        (" + leafSize + ", " + bitsPerKey + ")");
            // System.out.println("size: " + size);
        }
        System.out.println("experimental");
        for (int leafSize = 6; leafSize <= 18; leafSize++) {
            FunctionInfo info = test(leafSize, averageBucketSize, size, false);
            System.out.println("        (" + info.leafSize + ", " + info.bitsPerKey + ")");
        }
    }

    public static void reasonableParameterValues() {
        System.out.println("6.1 Reasonable Parameter Values");
        int leafSize = 10;
        int size = 16 * 1024;
        System.out.println("(leafSize=" + leafSize + ", size=" + size +
                "): averageBucketSize, generation time in nanos/key");
        ArrayList<FunctionInfo> infos = new ArrayList<FunctionInfo>();
        for (int averageBucketSize = 8; averageBucketSize <= 16 * 1024; averageBucketSize *= 2) {
            FunctionInfo info = test(leafSize, averageBucketSize, 16 * 1024, true);
            infos.add(info);
            System.out.println("        (" + info.averageBucketSize + ", " +
                    info.generateNanos + ")");
        }
        System.out
                .println("averageBucketSize, evaluation time in nanos/key");
        for (FunctionInfo info : infos) {
            System.out.println("        (" + info.averageBucketSize + ", " +
                    info.evaluateNanos + ")");
        }
        System.out
                .println("averageBucketSize, bits/key");
        for (FunctionInfo info : infos) {
            System.out.println("        (" + info.averageBucketSize + ", " +
                    info.bitsPerKey + ")");
        }
    }

    private static <T> long test(HashSet<T> set, UniversalHash<T> hash,
            byte[] description, int leafSize, int averageBucketSize, int measureCount) {
        BitSet known = new BitSet();
        RecSplitEvaluator<T> eval =
                RecSplitBuilder.newInstance(hash).leafSize(leafSize).averageBucketSize(averageBucketSize).
                buildEvaluator(new BitBuffer(description));
        // verify
        for (T x : set) {
            int index = eval.evaluate(x);
            if (index > set.size() || index < 0) {
                Assert.fail("wrong entry: " + x + " " + index +
                        " leafSize " + leafSize +
                        " averageBucketSize " + averageBucketSize +
                        " hash " + convertBytesToHex(description));
            }
            if (known.get(index)) {
                eval.evaluate(x);
                Assert.fail("duplicate entry: " + x + " " + index +
                        " leafSize " + leafSize +
                        " averageBucketSize " + averageBucketSize +
                        " hash " + convertBytesToHex(description));
            }
            known.set(index);
        }
        known.clear();
        known = null;
        attemptGc();
        // measure
        // Profiler prof = new Profiler().startCollecting();
        long best = Long.MAX_VALUE;
        ArrayList<T> list = new ArrayList<T>(set);
        for (int i = 0; i < measureCount; i++) {
            if (list.size() > 100000) {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            long evaluateNanos = System.nanoTime();
            for (int j = 0; j < measureCount; j++) {
                for (T x : list) {
                    int index = eval.evaluate(x);
                    if (index > list.size() || index < 0) {
                        Assert.fail("wrong entry: " + x + " " + index +
                                " leafSize " + leafSize +
                                " averageBucketSize " + averageBucketSize +
                                " hash " + convertBytesToHex(description));
                    }
                }
            }
            evaluateNanos = System.nanoTime() - evaluateNanos;
            // System.out.println("    eval " + evaluateNanos / set.size());
            best = Math.min(best, evaluateNanos);
        }
        // System.out.println(prof.getTop(5));
        return best / measureCount;
    }

    public static int attemptGc() {
        AtomicInteger obj = new AtomicInteger();
        WeakReference<Object> ref = new WeakReference<Object>(obj);
        // some dummy operation
        int count = obj.getAndIncrement();
        obj = null;
        while (ref.get() != null) {
            System.gc();
            count++;
        }
        // System.out.println("count: " + count);
        return count;
    }

    public static FunctionInfo testAndMeasure(int leafSize, int averageBucketSize, int size) {
        return test(leafSize, averageBucketSize, size, true, 1_000_000_000 / size, false);
    }

    public static FunctionInfo test(int leafSize, int averageBucketSize, int size, boolean evaluate) {
        return test(leafSize, averageBucketSize, size, evaluate, 5, false);
    }

    public static FunctionInfo test(int leafSize, int averageBucketSize, int size, boolean evaluate, int measureCount, boolean singleThreadedGeneration) {
        HashSet<Long> set = createSet(size, 1);
        UniversalHash<Long> hash = new LongHash();
        long generateNanos = System.nanoTime();
        RecSplitBuilder<Long> builder = RecSplitBuilder.newInstance(hash).
                leafSize(leafSize).averageBucketSize(averageBucketSize);
        if (singleThreadedGeneration) {
            builder.parallelism(1);
        }
        BitBuffer buff;
        buff = builder.generate(set);
        int bits = buff.position();
        byte[] data = buff.toByteArray();
        generateNanos = System.nanoTime() - generateNanos;
        assertTrue(bits <= data.length * 8);
        long evaluateNanos = 0;
        if (evaluate) {
            if (size > 100000) {
                // let the CPU cool or something...
                // if this is not done, the evaluation time is much slower
                int generateSeconds = (int) (generateNanos / 1000000) / 1000;
                try {
                    Thread.sleep((5 + generateSeconds)  * 1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            evaluateNanos = test(set, hash, data, leafSize, averageBucketSize, measureCount);
        }
        FunctionInfo info = new FunctionInfo();
        info.leafSize = leafSize;
        info.size = size;
        info.averageBucketSize = averageBucketSize;
        info.bitsPerKey = (double) bits / size;

        if (evaluate) {
            info.evaluateNanos = (double) evaluateNanos / size;
        }
        info.generateNanos = (double) generateNanos / size;
        return info;
    }

    public static HashSet<Long> createSet(int size, int seed) {
        Random r = new Random(seed);
        HashSet<Long> set = new HashSet<Long>(size);
        while (set.size() < size) {
            set.add(r.nextLong());
        }
        return set;
    }

    /**
     * Convert a byte array to a hex encoded string.
     *
     * @param value the byte array
     * @return the hex encoded string
     */
    public static String convertBytesToHex(byte[] value) {
        int len = value.length;
        char[] buff = new char[len + len];
        char[] hex = HEX;
        for (int i = 0; i < len; i++) {
            int c = value[i] & 0xff;
            buff[i + i] = hex[c >> 4];
            buff[i + i + 1] = hex[c & 0xf];
        }
        return new String(buff);
    }

    /**
     * Convert a hex encoded string to a byte array.
     *
     * @param s the hex encoded string
     * @return the byte array
     */
    public static byte[] convertHexToBytes(String s) {
        int len = s.length();
        if (len % 2 != 0) {
            throw new IllegalArgumentException(s);
        }
        len /= 2;
        byte[] buff = new byte[len];
        int[] hex = HEX_DECODE;
        for (int i = 0; i < len; i++) {
            int d = hex[s.charAt(i + i)] << 4 | hex[s.charAt(i + i + 1)];
            buff[i] = (byte) d;
        }
        return buff;
    }

}
